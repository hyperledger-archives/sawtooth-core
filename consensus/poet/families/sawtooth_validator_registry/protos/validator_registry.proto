// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "sawtooth.config.protobuf";

message ValidatorInfo {
    // The name of the endpoint. It should be a human readable name.
    string name = 1;

    // The validator's public key (currently using signer_public_key as this is
    // stored in the transaction header)
    string id = 2;

    // This is the protocol buffer described below.
    SignUpInfo signup_info = 3;

    // The header signature for the ValidatorRegistryPayload transaction. This
    // will be used to look up the block the ValidatorInfo was committed on.
    string transaction_id = 4;
}

message SignUpInfo {
    // Encoded public key corresponding to private key used by PoET to sign
    // wait certificates.
    string poet_public_key = 1;

    // Information that can be used internally to verify the validity of
    // the signup information stored as an opaque buffer.
    string proof_data = 2;

    // A string corresponding to the anti-Sybil ID for the enclave that
    // generated the signup information.
    string anti_sybil_id = 3;

    // The nonce associated with the signup info.  Note that this must match
    // the nonce provided when the signup info was created.
    string nonce = 4;
}

message ValidatorMap {
    // Contains a validator entry where the key is an  anti_sybil_id,
    // and the value is a validator_id
    message Entry {
        string key = 1;
        string value = 2;
    }

    // List of validator entries
    repeated Entry entries = 1;
}

message ValidatorRegistryPayload {
    // The action that the transaction processor will take. Currently this
    // is only “register”, but could include other actions in the futures
    // such as “revoke”
    string verb = 1;

    // The name of the endpoint. It should be a human readable name.
    string name = 2;

    // Validator's public key (currently using signer_public_key as this is
    // stored in the transaction header)
    string id = 3;

    // This is the protocol buffer described above.
    SignUpInfo signup_info = 4;

}
