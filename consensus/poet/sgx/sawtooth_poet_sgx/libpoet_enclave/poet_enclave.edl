/*
 Copyright 2017 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
------------------------------------------------------------------------------
*/

enclave {
    from "sgx_tkey_exchange.edl" import *;
    include "sgx_key_exchange.h"
    include "sgx_trts.h"
    include "sgx_tseal.h"
    include "../libpoet_shared/poet.h"

    trusted {
        public poet_err_t ecall_Initialize(
            [out] sgx_ra_context_t *p_context
            );

        public poet_err_t ecall_CreateErsatzEnclaveReport(
            [in, out] sgx_target_info_t* targetInfo,
            [out] sgx_report_t* outReport
            );
        public poet_err_t ecall_GetPseManifestHash(
            [out] sgx_sha256_hash_t* outPseManifestHash
            );

        public poet_err_t ecall_CalculateSealedSignupDataSize(
            [out] size_t* pSealedSignupDataSize
            );
        public poet_err_t ecall_CreateSignupData(
            [in] const sgx_target_info_t* inTargetInfo,
            [in, string] const char* inOriginatorPublicKeyHash,
            [out] sgx_ec256_public_t* outPoetPublicKey,
            [out] sgx_report_t* outEnclaveReport,
            [out, size=inSealedSignupDataSize] uint8_t* outSealedSignupData,
            size_t inSealedSignupDataSize,
            [out] sgx_ps_sec_prop_desc_t* outPseManifest
            );
        public poet_err_t ecall_UnsealSignupData(
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize,
            [out] sgx_ec256_public_t* outPoetPublicKey
            );
        public poet_err_t ecall_ReleaseSignupData(
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize
            );
        public poet_err_t ecall_VerifySignupInfo(
            [in] const sgx_target_info_t*   inTargetInfo,
            [in, string] const char*        inOriginatorPublicKeyHash,
            [in] const sgx_ec256_public_t*  inPoetPublicKey,
            [in] const sgx_sha256_hash_t*   inPseManifestHash,
            [out] sgx_report_t*             outEnclaveReport
            );
        public poet_err_t ecall_CreateWaitTimer(
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize,
            [in, string] const char* inValidatorAddress,
            [in, string] const char* inPreviousCertificateId,
            double inRequestTime,
            double inLocalMean,
            [out, size=inSerializedTimerLength] char* outSerializedTimer,
            size_t inSerializedTimerLength,
            [out] sgx_ec256_signature_t* outTimerSignature
            );
        public poet_err_t ecall_CreateWaitCertificate( 
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize,
            [in, string] const char* inSerializedWaitTimer,
            [in] const sgx_ec256_signature_t* inWaitTimerSignature,
            [in, string] const char* inBlockHash,
            [out, size=inSerializedWaitCertificateLength] char* outSerializedWaitCertificate,
            size_t inSerializedWaitCertificateLength,
            [out] sgx_ec256_signature_t* outWaitCertificateSignature
            );
        public poet_err_t ecall_VerifyWaitCertificate(
            [in, string] const char* inSerializedWaitCertificate,
            [in] const sgx_ec256_signature_t* inWaitCertificateSignature,
            [in] const sgx_ec256_public_t* inPoetPublicKey
            );
    };

    untrusted {
        void ocall_Print([in, string] const char* str);
        void ocall_Log(int level, [in, string] const char* str);
        void ocall_SetErrorMessage([in, string] const char* msg);
    };
};
