// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";
option go_package = "evm_pb2";

message EvmEntry {
    EvmStateAccount account = 1;
    repeated EvmStorage storage = 2;
}

message EvmStateAccount {
    bytes address = 1;
    int64 balance = 2;
    bytes code = 3;
    int64 nonce = 4;

    // In a future iteration, a storage_root field may be added so account data
    // can be separated from data stored by the account (storage).

    // In a future iteration, a public_key field may be added to validate
    // message calls have been sent by an authorized account.
    }

message EvmStorage {
    bytes key = 1;
    bytes value = 2;
}

// This is the payload delivered to the TP and follows the transaction
// structure defined at: https://ethereum.github.io/yellowpaper/paper.pdf
// Quoted descriptions are from this paper.
message EvmTransaction {
    // "...the number of transactions sent by the sender; formally T_n."
    uint64 nonce = 1;

    // "...the number of Wei to be paid per unit of gas for all computation
    // costs incurred as a result of the execution of this transaction;
    // formally T_p."
    uint64 gas_price = 2;

    // "...the maximum amount of gas that should be used in executing this
    // transaction. This is paid up-front, before any computation is done and
    // may not be increased later; formally T_g"
    uint64 gas_limit = 3;

    // "...the 160-bit address of the message call's recipient or, for a
    // contract creation transaction, âˆ…, used here to denote (the empty byte
    // array); formally T_t."
    bytes to = 4;

    // "...the number of Wei to be transferred to the message call's recipient
    // or, in the case of contract creation, as an endowment to the newly
    // created account; formally T_v."
    uint64 value = 5;

    // "An unlimited size byte array specifying the EVM-code for the account
    // initialisation procedure, formally T_i."
    //
    // This should only be set if this is a contract creation transaction.
    bytes init = 7;

    // "An unlimited size byte array specifying the input data of the message
    // call, formally T_d."
    //
    // This should only be set if this is a message call transaction.
    bytes data = 8;

    // The yellow paper also includes a signature in the transaction, but this
    // is already included as part of the Sawtooth transaction so we don't
    // duplicate it here.
}
