// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BlockInfoConfig {
    // message fields
    pub latest_block: u64,
    pub oldest_block: u64,
    pub target_count: u64,
    pub sync_tolerance: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockInfoConfig {
    pub fn new() -> BlockInfoConfig {
        ::std::default::Default::default()
    }

    // uint64 latest_block = 1;

    pub fn clear_latest_block(&mut self) {
        self.latest_block = 0;
    }

    // Param is passed by value, moved
    pub fn set_latest_block(&mut self, v: u64) {
        self.latest_block = v;
    }

    pub fn get_latest_block(&self) -> u64 {
        self.latest_block
    }

    // uint64 oldest_block = 2;

    pub fn clear_oldest_block(&mut self) {
        self.oldest_block = 0;
    }

    // Param is passed by value, moved
    pub fn set_oldest_block(&mut self, v: u64) {
        self.oldest_block = v;
    }

    pub fn get_oldest_block(&self) -> u64 {
        self.oldest_block
    }

    // uint64 target_count = 3;

    pub fn clear_target_count(&mut self) {
        self.target_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_count(&mut self, v: u64) {
        self.target_count = v;
    }

    pub fn get_target_count(&self) -> u64 {
        self.target_count
    }

    // uint64 sync_tolerance = 4;

    pub fn clear_sync_tolerance(&mut self) {
        self.sync_tolerance = 0;
    }

    // Param is passed by value, moved
    pub fn set_sync_tolerance(&mut self, v: u64) {
        self.sync_tolerance = v;
    }

    pub fn get_sync_tolerance(&self) -> u64 {
        self.sync_tolerance
    }
}

impl ::protobuf::Message for BlockInfoConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.latest_block = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.oldest_block = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target_count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sync_tolerance = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latest_block != 0 {
            my_size += ::protobuf::rt::value_size(1, self.latest_block, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.oldest_block != 0 {
            my_size += ::protobuf::rt::value_size(2, self.oldest_block, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.target_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.target_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sync_tolerance != 0 {
            my_size += ::protobuf::rt::value_size(4, self.sync_tolerance, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.latest_block != 0 {
            os.write_uint64(1, self.latest_block)?;
        }
        if self.oldest_block != 0 {
            os.write_uint64(2, self.oldest_block)?;
        }
        if self.target_count != 0 {
            os.write_uint64(3, self.target_count)?;
        }
        if self.sync_tolerance != 0 {
            os.write_uint64(4, self.sync_tolerance)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockInfoConfig {
        BlockInfoConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "latest_block",
                    |m: &BlockInfoConfig| { &m.latest_block },
                    |m: &mut BlockInfoConfig| { &mut m.latest_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "oldest_block",
                    |m: &BlockInfoConfig| { &m.oldest_block },
                    |m: &mut BlockInfoConfig| { &mut m.oldest_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "target_count",
                    |m: &BlockInfoConfig| { &m.target_count },
                    |m: &mut BlockInfoConfig| { &mut m.target_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sync_tolerance",
                    |m: &BlockInfoConfig| { &m.sync_tolerance },
                    |m: &mut BlockInfoConfig| { &mut m.sync_tolerance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockInfoConfig>(
                    "BlockInfoConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockInfoConfig {
        static mut instance: ::protobuf::lazy::Lazy<BlockInfoConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockInfoConfig,
        };
        unsafe {
            instance.get(BlockInfoConfig::new)
        }
    }
}

impl ::protobuf::Clear for BlockInfoConfig {
    fn clear(&mut self) {
        self.clear_latest_block();
        self.clear_oldest_block();
        self.clear_target_count();
        self.clear_sync_tolerance();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockInfoConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockInfoConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockInfo {
    // message fields
    pub block_num: u64,
    pub previous_block_id: ::std::string::String,
    pub signer_public_key: ::std::string::String,
    pub header_signature: ::std::string::String,
    pub timestamp: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockInfo {
    pub fn new() -> BlockInfo {
        ::std::default::Default::default()
    }

    // uint64 block_num = 1;

    pub fn clear_block_num(&mut self) {
        self.block_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_num(&mut self, v: u64) {
        self.block_num = v;
    }

    pub fn get_block_num(&self) -> u64 {
        self.block_num
    }

    // string previous_block_id = 2;

    pub fn clear_previous_block_id(&mut self) {
        self.previous_block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_block_id(&mut self, v: ::std::string::String) {
        self.previous_block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.previous_block_id
    }

    // Take field
    pub fn take_previous_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_block_id, ::std::string::String::new())
    }

    pub fn get_previous_block_id(&self) -> &str {
        &self.previous_block_id
    }

    // string signer_public_key = 3;

    pub fn clear_signer_public_key(&mut self) {
        self.signer_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_public_key(&mut self, v: ::std::string::String) {
        self.signer_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.signer_public_key
    }

    // Take field
    pub fn take_signer_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer_public_key, ::std::string::String::new())
    }

    pub fn get_signer_public_key(&self) -> &str {
        &self.signer_public_key
    }

    // string header_signature = 4;

    pub fn clear_header_signature(&mut self) {
        self.header_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_header_signature(&mut self, v: ::std::string::String) {
        self.header_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_signature(&mut self) -> &mut ::std::string::String {
        &mut self.header_signature
    }

    // Take field
    pub fn take_header_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.header_signature, ::std::string::String::new())
    }

    pub fn get_header_signature(&self) -> &str {
        &self.header_signature
    }

    // uint64 timestamp = 5;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
}

impl ::protobuf::Message for BlockInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_num = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_block_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer_public_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.header_signature)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_num != 0 {
            my_size += ::protobuf::rt::value_size(1, self.block_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.previous_block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.previous_block_id);
        }
        if !self.signer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signer_public_key);
        }
        if !self.header_signature.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.header_signature);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.block_num != 0 {
            os.write_uint64(1, self.block_num)?;
        }
        if !self.previous_block_id.is_empty() {
            os.write_string(2, &self.previous_block_id)?;
        }
        if !self.signer_public_key.is_empty() {
            os.write_string(3, &self.signer_public_key)?;
        }
        if !self.header_signature.is_empty() {
            os.write_string(4, &self.header_signature)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(5, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockInfo {
        BlockInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_num",
                    |m: &BlockInfo| { &m.block_num },
                    |m: &mut BlockInfo| { &mut m.block_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "previous_block_id",
                    |m: &BlockInfo| { &m.previous_block_id },
                    |m: &mut BlockInfo| { &mut m.previous_block_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signer_public_key",
                    |m: &BlockInfo| { &m.signer_public_key },
                    |m: &mut BlockInfo| { &mut m.signer_public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "header_signature",
                    |m: &BlockInfo| { &m.header_signature },
                    |m: &mut BlockInfo| { &mut m.header_signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &BlockInfo| { &m.timestamp },
                    |m: &mut BlockInfo| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockInfo>(
                    "BlockInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockInfo {
        static mut instance: ::protobuf::lazy::Lazy<BlockInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockInfo,
        };
        unsafe {
            instance.get(BlockInfo::new)
        }
    }
}

impl ::protobuf::Clear for BlockInfo {
    fn clear(&mut self) {
        self.clear_block_num();
        self.clear_previous_block_id();
        self.clear_signer_public_key();
        self.clear_header_signature();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockInfoTxn {
    // message fields
    pub block: ::protobuf::SingularPtrField<BlockInfo>,
    pub target_count: u64,
    pub sync_tolerance: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockInfoTxn {
    pub fn new() -> BlockInfoTxn {
        ::std::default::Default::default()
    }

    // .BlockInfo block = 1;

    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: BlockInfo) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut BlockInfo {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> BlockInfo {
        self.block.take().unwrap_or_else(|| BlockInfo::new())
    }

    pub fn get_block(&self) -> &BlockInfo {
        self.block.as_ref().unwrap_or_else(|| BlockInfo::default_instance())
    }

    // uint64 target_count = 2;

    pub fn clear_target_count(&mut self) {
        self.target_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_count(&mut self, v: u64) {
        self.target_count = v;
    }

    pub fn get_target_count(&self) -> u64 {
        self.target_count
    }

    // uint64 sync_tolerance = 3;

    pub fn clear_sync_tolerance(&mut self) {
        self.sync_tolerance = 0;
    }

    // Param is passed by value, moved
    pub fn set_sync_tolerance(&mut self, v: u64) {
        self.sync_tolerance = v;
    }

    pub fn get_sync_tolerance(&self) -> u64 {
        self.sync_tolerance
    }
}

impl ::protobuf::Message for BlockInfoTxn {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target_count = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sync_tolerance = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.target_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.target_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sync_tolerance != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sync_tolerance, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.target_count != 0 {
            os.write_uint64(2, self.target_count)?;
        }
        if self.sync_tolerance != 0 {
            os.write_uint64(3, self.sync_tolerance)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockInfoTxn {
        BlockInfoTxn::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockInfo>>(
                    "block",
                    |m: &BlockInfoTxn| { &m.block },
                    |m: &mut BlockInfoTxn| { &mut m.block },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "target_count",
                    |m: &BlockInfoTxn| { &m.target_count },
                    |m: &mut BlockInfoTxn| { &mut m.target_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sync_tolerance",
                    |m: &BlockInfoTxn| { &m.sync_tolerance },
                    |m: &mut BlockInfoTxn| { &mut m.sync_tolerance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockInfoTxn>(
                    "BlockInfoTxn",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockInfoTxn {
        static mut instance: ::protobuf::lazy::Lazy<BlockInfoTxn> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockInfoTxn,
        };
        unsafe {
            instance.get(BlockInfoTxn::new)
        }
    }
}

impl ::protobuf::Clear for BlockInfoTxn {
    fn clear(&mut self) {
        self.clear_block();
        self.clear_target_count();
        self.clear_sync_tolerance();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockInfoTxn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockInfoTxn {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10block_info.proto\"\xa1\x01\n\x0fBlockInfoConfig\x12!\n\x0clatest_b\
    lock\x18\x01\x20\x01(\x04R\x0blatestBlock\x12!\n\x0coldest_block\x18\x02\
    \x20\x01(\x04R\x0boldestBlock\x12!\n\x0ctarget_count\x18\x03\x20\x01(\
    \x04R\x0btargetCount\x12%\n\x0esync_tolerance\x18\x04\x20\x01(\x04R\rsyn\
    cTolerance\"\xc9\x01\n\tBlockInfo\x12\x1b\n\tblock_num\x18\x01\x20\x01(\
    \x04R\x08blockNum\x12*\n\x11previous_block_id\x18\x02\x20\x01(\tR\x0fpre\
    viousBlockId\x12*\n\x11signer_public_key\x18\x03\x20\x01(\tR\x0fsignerPu\
    blicKey\x12)\n\x10header_signature\x18\x04\x20\x01(\tR\x0fheaderSignatur\
    e\x12\x1c\n\ttimestamp\x18\x05\x20\x01(\x04R\ttimestamp\"z\n\x0cBlockInf\
    oTxn\x12\x20\n\x05block\x18\x01\x20\x01(\x0b2\n.BlockInfoR\x05block\x12!\
    \n\x0ctarget_count\x18\x02\x20\x01(\x04R\x0btargetCount\x12%\n\x0esync_t\
    olerance\x18\x03\x20\x01(\x04R\rsyncToleranceB0\n\x1csawtooth.block_info\
    .protobufP\x01Z\x0eblock_info_pb2b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
