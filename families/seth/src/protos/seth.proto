// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";
option go_package = "seth_pb2";

// -- State Serialization --

message EvmEntry {
    EvmStateAccount account = 1;
    repeated EvmStorage storage = 2;
}

message EvmStateAccount {
    bytes address = 1;
    int64 balance = 2;
    bytes code = 3;
    int64 nonce = 4;
    EvmPermissions permissions = 5;

    // In a future iteration, a storage_root field may be added so account data
    // can be separated from data stored by the account (storage).

    // In a future iteration, a public_key field may be added to validate
    // message calls have been sent by an authorized account.
}

message EvmPermissions {
    // Bit array where true means "has permission" and false means "doesn't have
    // permission"
    uint64 perms = 1;

    // Bit array where true means "the permission has been set" and false means
    // "the permission has not been set".
    uint64 set_bit = 2;
}

message EvmStorage {
    bytes key = 1;
    bytes value = 2;
}

// -- Transactions --

message SethTransaction {
    enum TransactionType {
      DEFAULT = 0;
      CREATE_EXTERNAL_ACCOUNT = 1;
      CREATE_CONTRACT_ACCOUNT = 2;
      MESSAGE_CALL = 3;
      SET_PERMISSIONS = 4;
    }
    TransactionType transaction_type = 1;

    // To eliminate the need for two deserialization steps, all types of
    // transactions are included as fields, but only the field indicated by the
    // transaction type should be set.
    CreateExternalAccountTxn create_external_account = 2;
    CreateContractAccountTxn create_contract_account = 3;
    MessageCallTxn message_call = 4;
    SetPermissionsTxn set_permissions = 5;
}

// The following transactions have fields that correspond to the transaction
// structure defined at: https://ethereum.github.io/yellowpaper/paper.pdf
// Quoted descriptions are from this paper.

message CreateExternalAccountTxn {
    // "...the number of transactions sent by the sender; formally T_n."
    uint64 nonce = 1;

    // "...the 160-bit address of the message call's recipient or, for a
    // contract creation transaction, ∅, used here to denote (the empty byte
    // array); formally T_t."
    bytes to = 2;

    // The Burrow-EVM permissions to assign to the new account
    EvmPermissions permissions = 3;
}

message CreateContractAccountTxn {
    // "...the number of transactions sent by the sender; formally T_n."
    uint64 nonce = 1;

    // "...the number of Wei to be paid per unit of gas for all computation
    // costs incurred as a result of the execution of this transaction;
    // formally T_p."
    uint64 gas_price = 2;

    // "...the maximum amount of gas that should be used in executing this
    // transaction. This is paid up-front, before any computation is done and
    // may not be increased later; formally T_g"
    uint64 gas_limit = 3;

    // "...the number of Wei to be transferred to the message call's recipient
    // or, in the case of contract creation, as an endowment to the newly
    // created account; formally T_v."
    uint64 value = 4;

    // "An unlimited size byte array specifying the EVM-code for the account
    // initialisation procedure, formally T_i."
    //
    // This should only be set if this is a contract creation transaction.
    bytes init = 5;

    // The Burrow-EVM permissions to assign to this account
    EvmPermissions permissions = 6;
}

message MessageCallTxn {
    // "...the number of transactions sent by the sender; formally T_n."
    uint64 nonce = 1;

    // "...the number of Wei to be paid per unit of gas for all computation
    // costs incurred as a result of the execution of this transaction;
    // formally T_p."
    uint64 gas_price = 2;

    // "...the maximum amount of gas that should be used in executing this
    // transaction. This is paid up-front, before any computation is done and
    // may not be increased later; formally T_g"
    uint64 gas_limit = 3;

    // "...the 160-bit address of the message call's recipient or, for a
    // contract creation transaction, ∅, used here to denote (the empty byte
    // array); formally T_t."
    bytes to = 4;

    // "...the number of Wei to be transferred to the message call's recipient
    // or, in the case of contract creation, as an endowment to the newly
    // created account; formally T_v."
    uint64 value = 5;

    // "An unlimited size byte array specifying the input data of the message
    // call, formally T_d."
    //
    // This should only be set if this is a message call transaction.
    bytes data = 6;
}

message SetPermissionsTxn {
    // "...the number of transactions sent by the sender; formally T_n."
    uint64 nonce = 1;

    // "...the 160-bit address of the message call's recipient or, for a
    // contract creation transaction, ∅, used here to denote (the empty byte
    // array); formally T_t."
    bytes to = 2;

    // The Burrow-EVM permissions to assign to this account
    EvmPermissions permissions = 3;
}

// -- Execution Results --

message SethTransactionReceipt {
    bytes contract_address = 1; // A contract address, if created
    uint64 gas_used = 2; // The gas consumed by this transaction
    bytes return_value = 3; // The return value of the contract execution
}

// -- Logging --

message EvmLogData {
    // 20 Bytes - address from which this log originated.
    bytes address = 1;

    // Array of 0 to 4 32-byte blobs of data.
    // (In solidity: The first topic is the hash of the signature
    // of the event (e.g. Deposit(address,bytes32,uint256)), except
    // you declared the event with the 'anonymous' specifier.)
    // See the following:
    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterchanges
    repeated bytes topics = 2;

    // contains one or more 32 Bytes non-indexed arguments of the log.
    bytes data = 3;
}
