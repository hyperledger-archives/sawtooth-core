swagger: '2.0'

info:
  version: "0.8.0"
  title: Sawtooth SupplyChain REST API
  description: |
    _This HTTP pragmatic REST API is built on top of Sawtooth Lake's existing
    ZMQ/Protobuf infrastructure, simplifying SupplyChain client interactions
    with the blockchain by exposing endpoints that use common HTTP/JSON
    standards. The SupplyChain REST API provides a secure means for clients to
    easily access SupplyChain objects held in global state.

    The REST API provides retrieval using [natural
    keys](https://en.wikipedia.org/wiki/Natural_key), which those working with
    supply chains will already be familiar with. This provides abstraction of
    the underlying implementation and architectures of the Sawtooth blockchain,
    clients no longer need to know the storage address encoding or the data
    storage format of SupplyChain objects to access them._

paths:
  /agents:
    get:
      summary: Fetches the data for the current set of Agents
      description: >
        Fetches a paginated list of all Agents. Using the `name` filter
        parameter narrows the list to any Agents who have a name which contains
        a specified case-insensitive string.

      parameters:
        - name: name
          in: query
          type: string
          description: A partial name to filter Agents by
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min"
        - $ref: "#/parameters/max"
      responses:
        200:
          description: Successfully retrieved Agents
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Agent"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /agents/{agent_id}:
    parameters:
      - $ref: "#/parameters/agent_id"
    get:
      summary: Fetches a particular Agent.
      responses:
        200:
          description: Successfully fetched Agent
          schema:
            properties:
              data:
                $ref: "#/definitions/Agent"
        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /applications:
    get:
      summary: Fetches the data for the current set of Applications
      description: >
        Fetches a paginated list of all Applications. Using the `applicant`
        parameter will narrow the list to any Applications that have a
        matching value in their applicant field. Using the `identifier` filter
        parameter will narrow the list to any Applications that have an
        identifier containing the specified string. Using the `status`
        parameter will narrow the list to any Applications that have a
        matching value in their status field.

      parameters:
        - $ref: "#/parameters/applicant"
        - $ref: "#/parameters/status"
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min"
        - $ref: "#/parameters/max"
      responses:
        200:
          description: Successfully retrieved Applications
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Application"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /records:
    get:
      summary: Fetches the data for the current set of Records
      description: >
        Fetches a paginated list of all Records. Using the `identifier` filter
        parameter will narrow the list to any Records that have an identifier
        containing the specified string.

        Records are identified by their serial number or other marking on the
        physical asset.
      parameters:
        - name: identifier
          in: query
          type: string
          description: A partial identifier to filter Records by
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min"
        - $ref: "#/parameters/max"
      responses:
        200:
          description: Successfully retrieved Records
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Record"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /records/{record_id}:
    parameters:
      - $ref: "#/parameters/record_id"
    get:
      summary: Fetches a particular Record.
      responses:
        200:
          description: Successfully fetched Record
          schema:
            properties:
              data:
                $ref: "#/definitions/Record"
        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /records/{record_id}/applications:
    parameters:
      - $ref: "#/parameters/record_id"
    get:
      summary: Fetches Applications for a particular Record.
      description: >
        Fetches a paginated list of Applications for a record. Applications are
        identified by the identifier of the Record they are associated with.
        Using the `applicant` parameter will narrow the list to any
        Applications that have a matching value in their applicant field. Using
        the `status` parameter will narrow the list to any Applications that
        have a matching value in their status field.
      parameters:
        - $ref: "#/parameters/applicant"
        - $ref: "#/parameters/status"
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min"
        - $ref: "#/parameters/max"
      responses:
        200:
          description: Successfully fetched Applications
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Application"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
responses:
  400BadRequest:
    description: Request was malformed
    schema:
      $ref: "#/definitions/Error"
  404NotFound:
    description: Identifier did not match any resource
    schema:
      $ref: "#/definitions/Error"
  500ServerError:
    description: Something went wrong within the validator
    schema:
      $ref: "#/definitions/Error"
  503ServiceUnavailable:
    description: API is unable to reach the validator
    schema:
      $ref: "#/definitions/Error"

parameters:
  agent_id:
    name: agent_id
    in: path
    type: string
    required: true
    description: Agent identifier, the public key the agent uses.
  applicant:
    name: applicant
    in: query
    type: string
    description: The public key of the applicant Agent to filter by
  count:
    name: count
    in: query
    type: integer
    default: 1000
    description: Number of items to return
  min:
    name: min
    in: query
    type: string
    description: Id or index to start paging (inclusive)
  max:
    name: max
    in: query
    type: string
    description: Id or index to end paging (inclusive)
  status:
    name: status
    in: query
    type: string
    enum:
      - OPEN
      - CANCELED
      - REJECTED
      - ACCEPTED
    description: An application status to filter by
  record_id:
    name: record_id
    in: path
    type: string
    required: true
    description: Record identifier, the serial number or natural identifier
      of the item (material) being tracked.

definitions:
  Paging:
    properties:
      start_index:
        type: integer
        example: 1000
      total_count:
        type: integer
        example: 54321
      previous:
        type: string
        example: https://api.sawtooth.com/agents?min=0&count=1000
      next:
        type: string
        example: https://api.sawtooth.com/agents?min=2000&count=1000
  Error:
    properties:
      code:
        type: integer
        example: 53
      title:
          type: string
          example: Invalid Count Query
      message:
        type: string
        example: >
          - The 'count' query parameter must be a positive, non-zero integer.
  Agent:
    properties:
      identifier:
        type: string
        example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758
      name:
        type: string
        example: Bob Bobson
  Application:
    properties:
      identifier:
        type: string
        example: 789-1232-9999-032
      applicant:
        type: string
        example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758
      type:
        type: string
        example: OWNER
        enum:
          - OWNER
          - CUSTODIAN
      status:
        type: string
        example: CANCELED
        enum:
          - OPEN
          - CANCELED
          - REJECTED
          - ACCEPTED
      terms:
        type: string
        example: "CIF: COST, INSURANCE AND FREIGHT."
  AgentRecord:
    properties:
      agent_identifier:
        type: string
        example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758
      start_time:
        type: integer
        example: 473467
  Record:
    properties:
      identifier:
        type: string
        example: 789-1232-9999-032
      creation_time:
        type: integer
        example: 123444
      owners:
        type: array
        items:
          $ref: "#/definitions/AgentRecord"
      custodians:
        type: array
        items:
          $ref: "#/definitions/AgentRecord"
      final:
        type: boolean
        example: true

