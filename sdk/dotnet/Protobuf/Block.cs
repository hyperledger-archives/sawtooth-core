// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: block.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from block.proto</summary>
public static partial class BlockReflection {

  #region Descriptor
  /// <summary>File descriptor for block.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BlockReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtibG9jay5wcm90bxoLYmF0Y2gucHJvdG8ilQEKC0Jsb2NrSGVhZGVyEhEK",
          "CWJsb2NrX251bRgBIAEoBBIZChFwcmV2aW91c19ibG9ja19pZBgCIAEoCRIZ",
          "ChFzaWduZXJfcHVibGljX2tleRgDIAEoCRIRCgliYXRjaF9pZHMYBCADKAkS",
          "EQoJY29uc2Vuc3VzGAUgASgMEhcKD3N0YXRlX3Jvb3RfaGFzaBgGIAEoCSJK",
          "CgVCbG9jaxIOCgZoZWFkZXIYASABKAwSGAoQaGVhZGVyX3NpZ25hdHVyZRgC",
          "IAEoCRIXCgdiYXRjaGVzGAMgAygLMgYuQmF0Y2hCJAoVc2F3dG9vdGguc2Rr",
          "LnByb3RvYnVmUAFaCWJsb2NrX3BiMmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BatchReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BlockHeader), global::BlockHeader.Parser, new[]{ "BlockNum", "PreviousBlockId", "SignerPublicKey", "BatchIds", "Consensus", "StateRootHash" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Block), global::Block.Parser, new[]{ "Header", "HeaderSignature", "Batches" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BlockHeader : pb::IMessage<BlockHeader> {
  private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BlockReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BlockHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BlockHeader(BlockHeader other) : this() {
    blockNum_ = other.blockNum_;
    previousBlockId_ = other.previousBlockId_;
    signerPublicKey_ = other.signerPublicKey_;
    batchIds_ = other.batchIds_.Clone();
    consensus_ = other.consensus_;
    stateRootHash_ = other.stateRootHash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BlockHeader Clone() {
    return new BlockHeader(this);
  }

  /// <summary>Field number for the "block_num" field.</summary>
  public const int BlockNumFieldNumber = 1;
  private ulong blockNum_;
  /// <summary>
  /// Block number in the chain
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong BlockNum {
    get { return blockNum_; }
    set {
      blockNum_ = value;
    }
  }

  /// <summary>Field number for the "previous_block_id" field.</summary>
  public const int PreviousBlockIdFieldNumber = 2;
  private string previousBlockId_ = "";
  /// <summary>
  /// The header_signature of the previous block that was added to the chain.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PreviousBlockId {
    get { return previousBlockId_; }
    set {
      previousBlockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "signer_public_key" field.</summary>
  public const int SignerPublicKeyFieldNumber = 3;
  private string signerPublicKey_ = "";
  /// <summary>
  /// Public key for the component internal to the validator that
  /// signed the BlockHeader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SignerPublicKey {
    get { return signerPublicKey_; }
    set {
      signerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "batch_ids" field.</summary>
  public const int BatchIdsFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_batchIds_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> batchIds_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// List of batch.header_signatures that match the order of batches
  /// required for the block
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> BatchIds {
    get { return batchIds_; }
  }

  /// <summary>Field number for the "consensus" field.</summary>
  public const int ConsensusFieldNumber = 5;
  private pb::ByteString consensus_ = pb::ByteString.Empty;
  /// <summary>
  /// Bytes that are set and verified by the consensus algorithm used to
  /// create and validate the block
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Consensus {
    get { return consensus_; }
    set {
      consensus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "state_root_hash" field.</summary>
  public const int StateRootHashFieldNumber = 6;
  private string stateRootHash_ = "";
  /// <summary>
  /// The state_root_hash should match the final state_root after all
  /// transactions in the batches have been applied, otherwise the block
  /// is not valid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StateRootHash {
    get { return stateRootHash_; }
    set {
      stateRootHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BlockHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BlockHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BlockNum != other.BlockNum) return false;
    if (PreviousBlockId != other.PreviousBlockId) return false;
    if (SignerPublicKey != other.SignerPublicKey) return false;
    if(!batchIds_.Equals(other.batchIds_)) return false;
    if (Consensus != other.Consensus) return false;
    if (StateRootHash != other.StateRootHash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BlockNum != 0UL) hash ^= BlockNum.GetHashCode();
    if (PreviousBlockId.Length != 0) hash ^= PreviousBlockId.GetHashCode();
    if (SignerPublicKey.Length != 0) hash ^= SignerPublicKey.GetHashCode();
    hash ^= batchIds_.GetHashCode();
    if (Consensus.Length != 0) hash ^= Consensus.GetHashCode();
    if (StateRootHash.Length != 0) hash ^= StateRootHash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BlockNum != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(BlockNum);
    }
    if (PreviousBlockId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PreviousBlockId);
    }
    if (SignerPublicKey.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(SignerPublicKey);
    }
    batchIds_.WriteTo(output, _repeated_batchIds_codec);
    if (Consensus.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(Consensus);
    }
    if (StateRootHash.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(StateRootHash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BlockNum != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockNum);
    }
    if (PreviousBlockId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousBlockId);
    }
    if (SignerPublicKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SignerPublicKey);
    }
    size += batchIds_.CalculateSize(_repeated_batchIds_codec);
    if (Consensus.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Consensus);
    }
    if (StateRootHash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StateRootHash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BlockHeader other) {
    if (other == null) {
      return;
    }
    if (other.BlockNum != 0UL) {
      BlockNum = other.BlockNum;
    }
    if (other.PreviousBlockId.Length != 0) {
      PreviousBlockId = other.PreviousBlockId;
    }
    if (other.SignerPublicKey.Length != 0) {
      SignerPublicKey = other.SignerPublicKey;
    }
    batchIds_.Add(other.batchIds_);
    if (other.Consensus.Length != 0) {
      Consensus = other.Consensus;
    }
    if (other.StateRootHash.Length != 0) {
      StateRootHash = other.StateRootHash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BlockNum = input.ReadUInt64();
          break;
        }
        case 18: {
          PreviousBlockId = input.ReadString();
          break;
        }
        case 26: {
          SignerPublicKey = input.ReadString();
          break;
        }
        case 34: {
          batchIds_.AddEntriesFrom(input, _repeated_batchIds_codec);
          break;
        }
        case 42: {
          Consensus = input.ReadBytes();
          break;
        }
        case 50: {
          StateRootHash = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Block : pb::IMessage<Block> {
  private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Block> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BlockReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Block() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Block(Block other) : this() {
    header_ = other.header_;
    headerSignature_ = other.headerSignature_;
    batches_ = other.batches_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Block Clone() {
    return new Block(this);
  }

  /// <summary>Field number for the "header" field.</summary>
  public const int HeaderFieldNumber = 1;
  private pb::ByteString header_ = pb::ByteString.Empty;
  /// <summary>
  /// The serialized version of the BlockHeader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Header {
    get { return header_; }
    set {
      header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "header_signature" field.</summary>
  public const int HeaderSignatureFieldNumber = 2;
  private string headerSignature_ = "";
  /// <summary>
  /// The signature derived from signing the header
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeaderSignature {
    get { return headerSignature_; }
    set {
      headerSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "batches" field.</summary>
  public const int BatchesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Batch> _repeated_batches_codec
      = pb::FieldCodec.ForMessage(26, global::Batch.Parser);
  private readonly pbc::RepeatedField<global::Batch> batches_ = new pbc::RepeatedField<global::Batch>();
  /// <summary>
  /// A list of batches. The batches may contain new batches that other
  /// validators may not have received yet, or they will be all batches needed
  /// for block validation when passed to the journal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Batch> Batches {
    get { return batches_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Block);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Block other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Header != other.Header) return false;
    if (HeaderSignature != other.HeaderSignature) return false;
    if(!batches_.Equals(other.batches_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Header.Length != 0) hash ^= Header.GetHashCode();
    if (HeaderSignature.Length != 0) hash ^= HeaderSignature.GetHashCode();
    hash ^= batches_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Header.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Header);
    }
    if (HeaderSignature.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HeaderSignature);
    }
    batches_.WriteTo(output, _repeated_batches_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Header.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Header);
    }
    if (HeaderSignature.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderSignature);
    }
    size += batches_.CalculateSize(_repeated_batches_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Block other) {
    if (other == null) {
      return;
    }
    if (other.Header.Length != 0) {
      Header = other.Header;
    }
    if (other.HeaderSignature.Length != 0) {
      HeaderSignature = other.HeaderSignature;
    }
    batches_.Add(other.batches_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Header = input.ReadBytes();
          break;
        }
        case 18: {
          HeaderSignature = input.ReadString();
          break;
        }
        case 26: {
          batches_.AddEntriesFrom(input, _repeated_batches_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
