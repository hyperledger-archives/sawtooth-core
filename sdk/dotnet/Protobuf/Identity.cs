// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: identity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from identity.proto</summary>
public static partial class IdentityReflection {

  #region Descriptor
  /// <summary>File descriptor for identity.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static IdentityReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5pZGVudGl0eS5wcm90byKuAQoGUG9saWN5EgwKBG5hbWUYASABKAkSHgoH",
          "ZW50cmllcxgCIAMoCzINLlBvbGljeS5FbnRyeRo1CgVFbnRyeRIfCgR0eXBl",
          "GAEgASgOMhEuUG9saWN5LkVudHJ5VHlwZRILCgNrZXkYAiABKAkiPwoJRW50",
          "cnlUeXBlEhQKEEVOVFJZX1RZUEVfVU5TRVQQABIOCgpQRVJNSVRfS0VZEAES",
          "DAoIREVOWV9LRVkQAiInCgpQb2xpY3lMaXN0EhkKCHBvbGljaWVzGAEgAygL",
          "MgcuUG9saWN5IikKBFJvbGUSDAoEbmFtZRgBIAEoCRITCgtwb2xpY3lfbmFt",
          "ZRgCIAEoCSIgCghSb2xlTGlzdBIUCgVyb2xlcxgBIAMoCzIFLlJvbGVCHgoa",
          "c2F3dG9vdGguaWRlbnRpdHkucHJvdG9idWZQAWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Policy), global::Policy.Parser, new[]{ "Name", "Entries" }, null, new[]{ typeof(global::Policy.Types.EntryType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Policy.Types.Entry), global::Policy.Types.Entry.Parser, new[]{ "Type", "Key" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::PolicyList), global::PolicyList.Parser, new[]{ "Policies" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Role), global::Role.Parser, new[]{ "Name", "PolicyName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoleList), global::RoleList.Parser, new[]{ "Roles" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Policy : pb::IMessage<Policy> {
  private static readonly pb::MessageParser<Policy> _parser = new pb::MessageParser<Policy>(() => new Policy());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Policy> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdentityReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Policy() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Policy(Policy other) : this() {
    name_ = other.name_;
    entries_ = other.entries_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Policy Clone() {
    return new Policy(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// name of the policy, this should be unique.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "entries" field.</summary>
  public const int EntriesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Policy.Types.Entry> _repeated_entries_codec
      = pb::FieldCodec.ForMessage(18, global::Policy.Types.Entry.Parser);
  private readonly pbc::RepeatedField<global::Policy.Types.Entry> entries_ = new pbc::RepeatedField<global::Policy.Types.Entry>();
  /// <summary>
  /// list of Entries
  /// The entries will be processed in order from first to last.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Policy.Types.Entry> Entries {
    get { return entries_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Policy);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Policy other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if(!entries_.Equals(other.entries_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= entries_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    entries_.WriteTo(output, _repeated_entries_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += entries_.CalculateSize(_repeated_entries_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Policy other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    entries_.Add(other.entries_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          entries_.AddEntriesFrom(input, _repeated_entries_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Policy message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum EntryType {
      [pbr::OriginalName("ENTRY_TYPE_UNSET")] Unset = 0,
      [pbr::OriginalName("PERMIT_KEY")] PermitKey = 1,
      [pbr::OriginalName("DENY_KEY")] DenyKey = 2,
    }

    public sealed partial class Entry : pb::IMessage<Entry> {
      private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Entry> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Policy.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Entry() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Entry(Entry other) : this() {
        type_ = other.type_;
        key_ = other.key_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Entry Clone() {
        return new Entry(this);
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 1;
      private global::Policy.Types.EntryType type_ = 0;
      /// <summary>
      /// Whether this is a Permit_KEY or Deny_KEY entry
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Policy.Types.EntryType Type {
        get { return type_; }
        set {
          type_ = value;
        }
      }

      /// <summary>Field number for the "key" field.</summary>
      public const int KeyFieldNumber = 2;
      private string key_ = "";
      /// <summary>
      /// This should be a list of public keys or * to refer to all participants.
      /// If using *, it should be the only key in the list.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Key {
        get { return key_; }
        set {
          key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Entry);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Entry other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Type != other.Type) return false;
        if (Key != other.Key) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Type != 0) hash ^= Type.GetHashCode();
        if (Key.Length != 0) hash ^= Key.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Type != 0) {
          output.WriteRawTag(8);
          output.WriteEnum((int) Type);
        }
        if (Key.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Key);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Type != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
        }
        if (Key.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Entry other) {
        if (other == null) {
          return;
        }
        if (other.Type != 0) {
          Type = other.Type;
        }
        if (other.Key.Length != 0) {
          Key = other.Key;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              type_ = (global::Policy.Types.EntryType) input.ReadEnum();
              break;
            }
            case 18: {
              Key = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
/// Policy will be stored in a Policy list to account for state collisions
/// </summary>
public sealed partial class PolicyList : pb::IMessage<PolicyList> {
  private static readonly pb::MessageParser<PolicyList> _parser = new pb::MessageParser<PolicyList>(() => new PolicyList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PolicyList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdentityReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PolicyList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PolicyList(PolicyList other) : this() {
    policies_ = other.policies_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PolicyList Clone() {
    return new PolicyList(this);
  }

  /// <summary>Field number for the "policies" field.</summary>
  public const int PoliciesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Policy> _repeated_policies_codec
      = pb::FieldCodec.ForMessage(10, global::Policy.Parser);
  private readonly pbc::RepeatedField<global::Policy> policies_ = new pbc::RepeatedField<global::Policy>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Policy> Policies {
    get { return policies_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PolicyList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PolicyList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!policies_.Equals(other.policies_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= policies_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    policies_.WriteTo(output, _repeated_policies_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += policies_.CalculateSize(_repeated_policies_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PolicyList other) {
    if (other == null) {
      return;
    }
    policies_.Add(other.policies_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          policies_.AddEntriesFrom(input, _repeated_policies_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Role : pb::IMessage<Role> {
  private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Role> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdentityReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Role() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Role(Role other) : this() {
    name_ = other.name_;
    policyName_ = other.policyName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Role Clone() {
    return new Role(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// Role name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "policy_name" field.</summary>
  public const int PolicyNameFieldNumber = 2;
  private string policyName_ = "";
  /// <summary>
  /// Name of corresponding policy
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyName {
    get { return policyName_; }
    set {
      policyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Role);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Role other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (PolicyName != other.PolicyName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (PolicyName.Length != 0) hash ^= PolicyName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (PolicyName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PolicyName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (PolicyName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Role other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.PolicyName.Length != 0) {
      PolicyName = other.PolicyName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          PolicyName = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Roles will be stored in a RoleList to account for state collisions
/// </summary>
public sealed partial class RoleList : pb::IMessage<RoleList> {
  private static readonly pb::MessageParser<RoleList> _parser = new pb::MessageParser<RoleList>(() => new RoleList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoleList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdentityReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoleList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoleList(RoleList other) : this() {
    roles_ = other.roles_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoleList Clone() {
    return new RoleList(this);
  }

  /// <summary>Field number for the "roles" field.</summary>
  public const int RolesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Role> _repeated_roles_codec
      = pb::FieldCodec.ForMessage(10, global::Role.Parser);
  private readonly pbc::RepeatedField<global::Role> roles_ = new pbc::RepeatedField<global::Role>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Role> Roles {
    get { return roles_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoleList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoleList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!roles_.Equals(other.roles_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= roles_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    roles_.WriteTo(output, _repeated_roles_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += roles_.CalculateSize(_repeated_roles_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoleList other) {
    if (other == null) {
      return;
    }
    roles_.Add(other.roles_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          roles_.AddEntriesFrom(input, _repeated_roles_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
