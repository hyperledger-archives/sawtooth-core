// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: client_batch_submit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from client_batch_submit.proto</summary>
public static partial class ClientBatchSubmitReflection {

  #region Descriptor
  /// <summary>File descriptor for client_batch_submit.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ClientBatchSubmitReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChljbGllbnRfYmF0Y2hfc3VibWl0LnByb3RvGgtiYXRjaC5wcm90byK9AgoR",
          "Q2xpZW50QmF0Y2hTdGF0dXMSEAoIYmF0Y2hfaWQYASABKAkSKQoGc3RhdHVz",
          "GAIgASgOMhkuQ2xpZW50QmF0Y2hTdGF0dXMuU3RhdHVzEkMKFGludmFsaWRf",
          "dHJhbnNhY3Rpb25zGAMgAygLMiUuQ2xpZW50QmF0Y2hTdGF0dXMuSW52YWxp",
          "ZFRyYW5zYWN0aW9uGlQKEkludmFsaWRUcmFuc2FjdGlvbhIWCg50cmFuc2Fj",
          "dGlvbl9pZBgBIAEoCRIPCgdtZXNzYWdlGAIgASgJEhUKDWV4dGVuZGVkX2Rh",
          "dGEYAyABKAwiUAoGU3RhdHVzEhAKDFNUQVRVU19VTlNFVBAAEg0KCUNPTU1J",
          "VFRFRBABEgsKB0lOVkFMSUQQAhILCgdQRU5ESU5HEAMSCwoHVU5LTk9XThAE",
          "IjMKGENsaWVudEJhdGNoU3VibWl0UmVxdWVzdBIXCgdiYXRjaGVzGAEgAygL",
          "MgYuQmF0Y2giqQEKGUNsaWVudEJhdGNoU3VibWl0UmVzcG9uc2USMQoGc3Rh",
          "dHVzGAEgASgOMiEuQ2xpZW50QmF0Y2hTdWJtaXRSZXNwb25zZS5TdGF0dXMi",
          "WQoGU3RhdHVzEhAKDFNUQVRVU19VTlNFVBAAEgYKAk9LEAESEgoOSU5URVJO",
          "QUxfRVJST1IQAhIRCg1JTlZBTElEX0JBVENIEAMSDgoKUVVFVUVfRlVMTBAE",
          "IkwKGENsaWVudEJhdGNoU3RhdHVzUmVxdWVzdBIRCgliYXRjaF9pZHMYASAD",
          "KAkSDAoEd2FpdBgCIAEoCBIPCgd0aW1lb3V0GAMgASgNItMBChlDbGllbnRC",
          "YXRjaFN0YXR1c1Jlc3BvbnNlEjEKBnN0YXR1cxgBIAEoDjIhLkNsaWVudEJh",
          "dGNoU3RhdHVzUmVzcG9uc2UuU3RhdHVzEioKDmJhdGNoX3N0YXR1c2VzGAIg",
          "AygLMhIuQ2xpZW50QmF0Y2hTdGF0dXMiVwoGU3RhdHVzEhAKDFNUQVRVU19V",
          "TlNFVBAAEgYKAk9LEAESEgoOSU5URVJOQUxfRVJST1IQAhIPCgtOT19SRVNP",
          "VVJDRRAFEg4KCklOVkFMSURfSUQQCEIyChVzYXd0b290aC5zZGsucHJvdG9i",
          "dWZQAVoXY2xpZW50X2JhdGNoX3N1Ym1pdF9wYjJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BatchReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchStatus), global::ClientBatchStatus.Parser, new[]{ "BatchId", "Status", "InvalidTransactions" }, null, new[]{ typeof(global::ClientBatchStatus.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchStatus.Types.InvalidTransaction), global::ClientBatchStatus.Types.InvalidTransaction.Parser, new[]{ "TransactionId", "Message", "ExtendedData" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchSubmitRequest), global::ClientBatchSubmitRequest.Parser, new[]{ "Batches" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchSubmitResponse), global::ClientBatchSubmitResponse.Parser, new[]{ "Status" }, null, new[]{ typeof(global::ClientBatchSubmitResponse.Types.Status) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchStatusRequest), global::ClientBatchStatusRequest.Parser, new[]{ "BatchIds", "Wait", "Timeout" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchStatusResponse), global::ClientBatchStatusResponse.Parser, new[]{ "Status", "BatchStatuses" }, null, new[]{ typeof(global::ClientBatchStatusResponse.Types.Status) }, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// Information about the status of a batch submitted to the validator.
///
/// Attributes:
///     batch_id: The id (header_signature) of the batch
///     status: The committed status of the batch
///     invalid_transactions: Info for transactions that failed, if any
///
/// Statuses:
///     COMMITTED - the batch was accepted and has been committed to the chain
///     INVALID - the batch failed validation, it should be resubmitted
///     PENDING - the batch is still being processed
///     UNKNOWN - no status for the batch could be found (possibly invalid)
/// </summary>
public sealed partial class ClientBatchStatus : pb::IMessage<ClientBatchStatus> {
  private static readonly pb::MessageParser<ClientBatchStatus> _parser = new pb::MessageParser<ClientBatchStatus>(() => new ClientBatchStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchSubmitReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatus(ClientBatchStatus other) : this() {
    batchId_ = other.batchId_;
    status_ = other.status_;
    invalidTransactions_ = other.invalidTransactions_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatus Clone() {
    return new ClientBatchStatus(this);
  }

  /// <summary>Field number for the "batch_id" field.</summary>
  public const int BatchIdFieldNumber = 1;
  private string batchId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BatchId {
    get { return batchId_; }
    set {
      batchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private global::ClientBatchStatus.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientBatchStatus.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "invalid_transactions" field.</summary>
  public const int InvalidTransactionsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ClientBatchStatus.Types.InvalidTransaction> _repeated_invalidTransactions_codec
      = pb::FieldCodec.ForMessage(26, global::ClientBatchStatus.Types.InvalidTransaction.Parser);
  private readonly pbc::RepeatedField<global::ClientBatchStatus.Types.InvalidTransaction> invalidTransactions_ = new pbc::RepeatedField<global::ClientBatchStatus.Types.InvalidTransaction>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ClientBatchStatus.Types.InvalidTransaction> InvalidTransactions {
    get { return invalidTransactions_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BatchId != other.BatchId) return false;
    if (Status != other.Status) return false;
    if(!invalidTransactions_.Equals(other.invalidTransactions_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BatchId.Length != 0) hash ^= BatchId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    hash ^= invalidTransactions_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BatchId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(BatchId);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Status);
    }
    invalidTransactions_.WriteTo(output, _repeated_invalidTransactions_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BatchId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    size += invalidTransactions_.CalculateSize(_repeated_invalidTransactions_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchStatus other) {
    if (other == null) {
      return;
    }
    if (other.BatchId.Length != 0) {
      BatchId = other.BatchId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    invalidTransactions_.Add(other.invalidTransactions_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BatchId = input.ReadString();
          break;
        }
        case 16: {
          status_ = (global::ClientBatchStatus.Types.Status) input.ReadEnum();
          break;
        }
        case 26: {
          invalidTransactions_.AddEntriesFrom(input, _repeated_invalidTransactions_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ClientBatchStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("STATUS_UNSET")] Unset = 0,
      [pbr::OriginalName("COMMITTED")] Committed = 1,
      [pbr::OriginalName("INVALID")] Invalid = 2,
      [pbr::OriginalName("PENDING")] Pending = 3,
      [pbr::OriginalName("UNKNOWN")] Unknown = 4,
    }

    public sealed partial class InvalidTransaction : pb::IMessage<InvalidTransaction> {
      private static readonly pb::MessageParser<InvalidTransaction> _parser = new pb::MessageParser<InvalidTransaction>(() => new InvalidTransaction());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<InvalidTransaction> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::ClientBatchStatus.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public InvalidTransaction() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public InvalidTransaction(InvalidTransaction other) : this() {
        transactionId_ = other.transactionId_;
        message_ = other.message_;
        extendedData_ = other.extendedData_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public InvalidTransaction Clone() {
        return new InvalidTransaction(this);
      }

      /// <summary>Field number for the "transaction_id" field.</summary>
      public const int TransactionIdFieldNumber = 1;
      private string transactionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string TransactionId {
        get { return transactionId_; }
        set {
          transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "message" field.</summary>
      public const int MessageFieldNumber = 2;
      private string message_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Message {
        get { return message_; }
        set {
          message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "extended_data" field.</summary>
      public const int ExtendedDataFieldNumber = 3;
      private pb::ByteString extendedData_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString ExtendedData {
        get { return extendedData_; }
        set {
          extendedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as InvalidTransaction);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(InvalidTransaction other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (TransactionId != other.TransactionId) return false;
        if (Message != other.Message) return false;
        if (ExtendedData != other.ExtendedData) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (ExtendedData.Length != 0) hash ^= ExtendedData.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (TransactionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(TransactionId);
        }
        if (Message.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Message);
        }
        if (ExtendedData.Length != 0) {
          output.WriteRawTag(26);
          output.WriteBytes(ExtendedData);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (TransactionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
        }
        if (Message.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (ExtendedData.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtendedData);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(InvalidTransaction other) {
        if (other == null) {
          return;
        }
        if (other.TransactionId.Length != 0) {
          TransactionId = other.TransactionId;
        }
        if (other.Message.Length != 0) {
          Message = other.Message;
        }
        if (other.ExtendedData.Length != 0) {
          ExtendedData = other.ExtendedData;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              TransactionId = input.ReadString();
              break;
            }
            case 18: {
              Message = input.ReadString();
              break;
            }
            case 26: {
              ExtendedData = input.ReadBytes();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
/// Submits a list of Batches to be added to the blockchain.
/// </summary>
public sealed partial class ClientBatchSubmitRequest : pb::IMessage<ClientBatchSubmitRequest> {
  private static readonly pb::MessageParser<ClientBatchSubmitRequest> _parser = new pb::MessageParser<ClientBatchSubmitRequest>(() => new ClientBatchSubmitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchSubmitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchSubmitReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchSubmitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchSubmitRequest(ClientBatchSubmitRequest other) : this() {
    batches_ = other.batches_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchSubmitRequest Clone() {
    return new ClientBatchSubmitRequest(this);
  }

  /// <summary>Field number for the "batches" field.</summary>
  public const int BatchesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Batch> _repeated_batches_codec
      = pb::FieldCodec.ForMessage(10, global::Batch.Parser);
  private readonly pbc::RepeatedField<global::Batch> batches_ = new pbc::RepeatedField<global::Batch>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Batch> Batches {
    get { return batches_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchSubmitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchSubmitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!batches_.Equals(other.batches_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= batches_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    batches_.WriteTo(output, _repeated_batches_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += batches_.CalculateSize(_repeated_batches_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchSubmitRequest other) {
    if (other == null) {
      return;
    }
    batches_.Add(other.batches_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          batches_.AddEntriesFrom(input, _repeated_batches_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// This is a response to a submission of one or more Batches.
/// Statuses:
///   * OK - everything with the request worked as expected
///   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
///   * INVALID_BATCH - the batch failed validation, likely due to a bad signature
///   * QUEUE_FULL - the batch is unable to be queued for processing, due to
///        a full processing queue.  The batch may be submitted again.
/// </summary>
public sealed partial class ClientBatchSubmitResponse : pb::IMessage<ClientBatchSubmitResponse> {
  private static readonly pb::MessageParser<ClientBatchSubmitResponse> _parser = new pb::MessageParser<ClientBatchSubmitResponse>(() => new ClientBatchSubmitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchSubmitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchSubmitReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchSubmitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchSubmitResponse(ClientBatchSubmitResponse other) : this() {
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchSubmitResponse Clone() {
    return new ClientBatchSubmitResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ClientBatchSubmitResponse.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientBatchSubmitResponse.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchSubmitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchSubmitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchSubmitResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          status_ = (global::ClientBatchSubmitResponse.Types.Status) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ClientBatchSubmitResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("STATUS_UNSET")] Unset = 0,
      [pbr::OriginalName("OK")] Ok = 1,
      [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 2,
      [pbr::OriginalName("INVALID_BATCH")] InvalidBatch = 3,
      [pbr::OriginalName("QUEUE_FULL")] QueueFull = 4,
    }

  }
  #endregion

}

/// <summary>
/// A request for the status of one or more batches, specified by id.
/// If `wait` is set to true, the validator will wait to respond until all
/// batches are committed, or until the specified `timeout` in seconds has
/// elapsed. Defaults to 300.
/// </summary>
public sealed partial class ClientBatchStatusRequest : pb::IMessage<ClientBatchStatusRequest> {
  private static readonly pb::MessageParser<ClientBatchStatusRequest> _parser = new pb::MessageParser<ClientBatchStatusRequest>(() => new ClientBatchStatusRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchStatusRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchSubmitReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatusRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatusRequest(ClientBatchStatusRequest other) : this() {
    batchIds_ = other.batchIds_.Clone();
    wait_ = other.wait_;
    timeout_ = other.timeout_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatusRequest Clone() {
    return new ClientBatchStatusRequest(this);
  }

  /// <summary>Field number for the "batch_ids" field.</summary>
  public const int BatchIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_batchIds_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> batchIds_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> BatchIds {
    get { return batchIds_; }
  }

  /// <summary>Field number for the "wait" field.</summary>
  public const int WaitFieldNumber = 2;
  private bool wait_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Wait {
    get { return wait_; }
    set {
      wait_ = value;
    }
  }

  /// <summary>Field number for the "timeout" field.</summary>
  public const int TimeoutFieldNumber = 3;
  private uint timeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Timeout {
    get { return timeout_; }
    set {
      timeout_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchStatusRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchStatusRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!batchIds_.Equals(other.batchIds_)) return false;
    if (Wait != other.Wait) return false;
    if (Timeout != other.Timeout) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= batchIds_.GetHashCode();
    if (Wait != false) hash ^= Wait.GetHashCode();
    if (Timeout != 0) hash ^= Timeout.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    batchIds_.WriteTo(output, _repeated_batchIds_codec);
    if (Wait != false) {
      output.WriteRawTag(16);
      output.WriteBool(Wait);
    }
    if (Timeout != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Timeout);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += batchIds_.CalculateSize(_repeated_batchIds_codec);
    if (Wait != false) {
      size += 1 + 1;
    }
    if (Timeout != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchStatusRequest other) {
    if (other == null) {
      return;
    }
    batchIds_.Add(other.batchIds_);
    if (other.Wait != false) {
      Wait = other.Wait;
    }
    if (other.Timeout != 0) {
      Timeout = other.Timeout;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          batchIds_.AddEntriesFrom(input, _repeated_batchIds_codec);
          break;
        }
        case 16: {
          Wait = input.ReadBool();
          break;
        }
        case 24: {
          Timeout = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// This is a response to a request for the status of specific batches.
/// Statuses:
///   * OK - everything with the request worked as expected
///   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
///   * NO_RESOURCE - the response contains no data, likely because
///     no ids were specified in the request
/// </summary>
public sealed partial class ClientBatchStatusResponse : pb::IMessage<ClientBatchStatusResponse> {
  private static readonly pb::MessageParser<ClientBatchStatusResponse> _parser = new pb::MessageParser<ClientBatchStatusResponse>(() => new ClientBatchStatusResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchStatusResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchSubmitReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatusResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatusResponse(ClientBatchStatusResponse other) : this() {
    status_ = other.status_;
    batchStatuses_ = other.batchStatuses_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchStatusResponse Clone() {
    return new ClientBatchStatusResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ClientBatchStatusResponse.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientBatchStatusResponse.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "batch_statuses" field.</summary>
  public const int BatchStatusesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ClientBatchStatus> _repeated_batchStatuses_codec
      = pb::FieldCodec.ForMessage(18, global::ClientBatchStatus.Parser);
  private readonly pbc::RepeatedField<global::ClientBatchStatus> batchStatuses_ = new pbc::RepeatedField<global::ClientBatchStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ClientBatchStatus> BatchStatuses {
    get { return batchStatuses_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchStatusResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchStatusResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if(!batchStatuses_.Equals(other.batchStatuses_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    hash ^= batchStatuses_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    batchStatuses_.WriteTo(output, _repeated_batchStatuses_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    size += batchStatuses_.CalculateSize(_repeated_batchStatuses_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchStatusResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    batchStatuses_.Add(other.batchStatuses_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          status_ = (global::ClientBatchStatusResponse.Types.Status) input.ReadEnum();
          break;
        }
        case 18: {
          batchStatuses_.AddEntriesFrom(input, _repeated_batchStatuses_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ClientBatchStatusResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("STATUS_UNSET")] Unset = 0,
      [pbr::OriginalName("OK")] Ok = 1,
      [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 2,
      [pbr::OriginalName("NO_RESOURCE")] NoResource = 5,
      [pbr::OriginalName("INVALID_ID")] InvalidId = 8,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
