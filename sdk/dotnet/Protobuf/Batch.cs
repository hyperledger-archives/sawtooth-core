// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: batch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from batch.proto</summary>
public static partial class BatchReflection {

  #region Descriptor
  /// <summary>File descriptor for batch.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BatchReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtiYXRjaC5wcm90bxoRdHJhbnNhY3Rpb24ucHJvdG8iQQoLQmF0Y2hIZWFk",
          "ZXISGQoRc2lnbmVyX3B1YmxpY19rZXkYASABKAkSFwoPdHJhbnNhY3Rpb25f",
          "aWRzGAIgAygJImQKBUJhdGNoEg4KBmhlYWRlchgBIAEoDBIYChBoZWFkZXJf",
          "c2lnbmF0dXJlGAIgASgJEiIKDHRyYW5zYWN0aW9ucxgDIAMoCzIMLlRyYW5z",
          "YWN0aW9uEg0KBXRyYWNlGAQgASgIIiQKCUJhdGNoTGlzdBIXCgdiYXRjaGVz",
          "GAEgAygLMgYuQmF0Y2hCJAoVc2F3dG9vdGguc2RrLnByb3RvYnVmUAFaCWJh",
          "dGNoX3BiMmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::TransactionReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BatchHeader), global::BatchHeader.Parser, new[]{ "SignerPublicKey", "TransactionIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Batch), global::Batch.Parser, new[]{ "Header", "HeaderSignature", "Transactions", "Trace" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BatchList), global::BatchList.Parser, new[]{ "Batches" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BatchHeader : pb::IMessage<BatchHeader> {
  private static readonly pb::MessageParser<BatchHeader> _parser = new pb::MessageParser<BatchHeader>(() => new BatchHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BatchHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BatchReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BatchHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BatchHeader(BatchHeader other) : this() {
    signerPublicKey_ = other.signerPublicKey_;
    transactionIds_ = other.transactionIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BatchHeader Clone() {
    return new BatchHeader(this);
  }

  /// <summary>Field number for the "signer_public_key" field.</summary>
  public const int SignerPublicKeyFieldNumber = 1;
  private string signerPublicKey_ = "";
  /// <summary>
  /// Public key for the client that signed the BatchHeader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SignerPublicKey {
    get { return signerPublicKey_; }
    set {
      signerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "transaction_ids" field.</summary>
  public const int TransactionIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_transactionIds_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> transactionIds_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// List of transaction.header_signatures that match the order of
  /// transactions required for the batch
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> TransactionIds {
    get { return transactionIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BatchHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BatchHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SignerPublicKey != other.SignerPublicKey) return false;
    if(!transactionIds_.Equals(other.transactionIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SignerPublicKey.Length != 0) hash ^= SignerPublicKey.GetHashCode();
    hash ^= transactionIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SignerPublicKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SignerPublicKey);
    }
    transactionIds_.WriteTo(output, _repeated_transactionIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SignerPublicKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SignerPublicKey);
    }
    size += transactionIds_.CalculateSize(_repeated_transactionIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BatchHeader other) {
    if (other == null) {
      return;
    }
    if (other.SignerPublicKey.Length != 0) {
      SignerPublicKey = other.SignerPublicKey;
    }
    transactionIds_.Add(other.transactionIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SignerPublicKey = input.ReadString();
          break;
        }
        case 18: {
          transactionIds_.AddEntriesFrom(input, _repeated_transactionIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Batch : pb::IMessage<Batch> {
  private static readonly pb::MessageParser<Batch> _parser = new pb::MessageParser<Batch>(() => new Batch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Batch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BatchReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Batch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Batch(Batch other) : this() {
    header_ = other.header_;
    headerSignature_ = other.headerSignature_;
    transactions_ = other.transactions_.Clone();
    trace_ = other.trace_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Batch Clone() {
    return new Batch(this);
  }

  /// <summary>Field number for the "header" field.</summary>
  public const int HeaderFieldNumber = 1;
  private pb::ByteString header_ = pb::ByteString.Empty;
  /// <summary>
  /// The serialized version of the BlockHeader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Header {
    get { return header_; }
    set {
      header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "header_signature" field.</summary>
  public const int HeaderSignatureFieldNumber = 2;
  private string headerSignature_ = "";
  /// <summary>
  /// The signature derived from signing the header
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeaderSignature {
    get { return headerSignature_; }
    set {
      headerSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "transactions" field.</summary>
  public const int TransactionsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Transaction> _repeated_transactions_codec
      = pb::FieldCodec.ForMessage(26, global::Transaction.Parser);
  private readonly pbc::RepeatedField<global::Transaction> transactions_ = new pbc::RepeatedField<global::Transaction>();
  /// <summary>
  /// A list of the transactions that match the list of
  /// transaction_ids listed in the batch header
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Transaction> Transactions {
    get { return transactions_; }
  }

  /// <summary>Field number for the "trace" field.</summary>
  public const int TraceFieldNumber = 4;
  private bool trace_;
  /// <summary>
  /// A debugging flag which indicates this batch should be traced through the
  /// system, resulting in a higher level of debugging output.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Trace {
    get { return trace_; }
    set {
      trace_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Batch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Batch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Header != other.Header) return false;
    if (HeaderSignature != other.HeaderSignature) return false;
    if(!transactions_.Equals(other.transactions_)) return false;
    if (Trace != other.Trace) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Header.Length != 0) hash ^= Header.GetHashCode();
    if (HeaderSignature.Length != 0) hash ^= HeaderSignature.GetHashCode();
    hash ^= transactions_.GetHashCode();
    if (Trace != false) hash ^= Trace.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Header.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Header);
    }
    if (HeaderSignature.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HeaderSignature);
    }
    transactions_.WriteTo(output, _repeated_transactions_codec);
    if (Trace != false) {
      output.WriteRawTag(32);
      output.WriteBool(Trace);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Header.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Header);
    }
    if (HeaderSignature.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderSignature);
    }
    size += transactions_.CalculateSize(_repeated_transactions_codec);
    if (Trace != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Batch other) {
    if (other == null) {
      return;
    }
    if (other.Header.Length != 0) {
      Header = other.Header;
    }
    if (other.HeaderSignature.Length != 0) {
      HeaderSignature = other.HeaderSignature;
    }
    transactions_.Add(other.transactions_);
    if (other.Trace != false) {
      Trace = other.Trace;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Header = input.ReadBytes();
          break;
        }
        case 18: {
          HeaderSignature = input.ReadString();
          break;
        }
        case 26: {
          transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
          break;
        }
        case 32: {
          Trace = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class BatchList : pb::IMessage<BatchList> {
  private static readonly pb::MessageParser<BatchList> _parser = new pb::MessageParser<BatchList>(() => new BatchList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BatchList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BatchReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BatchList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BatchList(BatchList other) : this() {
    batches_ = other.batches_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BatchList Clone() {
    return new BatchList(this);
  }

  /// <summary>Field number for the "batches" field.</summary>
  public const int BatchesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Batch> _repeated_batches_codec
      = pb::FieldCodec.ForMessage(10, global::Batch.Parser);
  private readonly pbc::RepeatedField<global::Batch> batches_ = new pbc::RepeatedField<global::Batch>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Batch> Batches {
    get { return batches_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BatchList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BatchList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!batches_.Equals(other.batches_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= batches_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    batches_.WriteTo(output, _repeated_batches_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += batches_.CalculateSize(_repeated_batches_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BatchList other) {
    if (other == null) {
      return;
    }
    batches_.Add(other.batches_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          batches_.AddEntriesFrom(input, _repeated_batches_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
