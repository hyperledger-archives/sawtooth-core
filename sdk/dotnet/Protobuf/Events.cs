// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: events.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from events.proto</summary>
public static partial class EventsReflection {

  #region Descriptor
  /// <summary>File descriptor for events.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EventsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxldmVudHMucHJvdG8ieAoFRXZlbnQSEgoKZXZlbnRfdHlwZRgBIAEoCRIk",
          "CgphdHRyaWJ1dGVzGAIgAygLMhAuRXZlbnQuQXR0cmlidXRlEgwKBGRhdGEY",
          "AyABKAwaJwoJQXR0cmlidXRlEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
          "CSIjCglFdmVudExpc3QSFgoGZXZlbnRzGAEgAygLMgYuRXZlbnQiwQEKC0V2",
          "ZW50RmlsdGVyEgsKA2tleRgBIAEoCRIUCgxtYXRjaF9zdHJpbmcYAiABKAkS",
          "LAoLZmlsdGVyX3R5cGUYAyABKA4yFy5FdmVudEZpbHRlci5GaWx0ZXJUeXBl",
          "ImEKCkZpbHRlclR5cGUSFQoRRklMVEVSX1RZUEVfVU5TRVQQABIOCgpTSU1Q",
          "TEVfQU5ZEAESDgoKU0lNUExFX0FMTBACEg0KCVJFR0VYX0FOWRADEg0KCVJF",
          "R0VYX0FMTBAEIkYKEUV2ZW50U3Vic2NyaXB0aW9uEhIKCmV2ZW50X3R5cGUY",
          "ASABKAkSHQoHZmlsdGVycxgCIAMoCzIMLkV2ZW50RmlsdGVyQiUKFXNhd3Rv",
          "b3RoLnNkay5wcm90b2J1ZlABWgpldmVudHNfcGIyYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Event), global::Event.Parser, new[]{ "EventType", "Attributes", "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Event.Types.Attribute), global::Event.Types.Attribute.Parser, new[]{ "Key", "Value" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventList), global::EventList.Parser, new[]{ "Events" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventFilter), global::EventFilter.Parser, new[]{ "Key", "MatchString", "FilterType" }, null, new[]{ typeof(global::EventFilter.Types.FilterType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventSubscription), global::EventSubscription.Parser, new[]{ "EventType", "Filters" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Event : pb::IMessage<Event> {
  private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Event> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EventsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Event() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Event(Event other) : this() {
    eventType_ = other.eventType_;
    attributes_ = other.attributes_.Clone();
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Event Clone() {
    return new Event(this);
  }

  /// <summary>Field number for the "event_type" field.</summary>
  public const int EventTypeFieldNumber = 1;
  private string eventType_ = "";
  /// <summary>
  /// Used to subscribe to events and servers as a hint for how to deserialize
  /// event_data and what pairs to expect in attributes.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EventType {
    get { return eventType_; }
    set {
      eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "attributes" field.</summary>
  public const int AttributesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Event.Types.Attribute> _repeated_attributes_codec
      = pb::FieldCodec.ForMessage(18, global::Event.Types.Attribute.Parser);
  private readonly pbc::RepeatedField<global::Event.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Event.Types.Attribute>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Event.Types.Attribute> Attributes {
    get { return attributes_; }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  /// Opaque data defined by the event_type.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Event);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Event other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventType != other.EventType) return false;
    if(!attributes_.Equals(other.attributes_)) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventType.Length != 0) hash ^= EventType.GetHashCode();
    hash ^= attributes_.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventType.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(EventType);
    }
    attributes_.WriteTo(output, _repeated_attributes_codec);
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
    }
    size += attributes_.CalculateSize(_repeated_attributes_codec);
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Event other) {
    if (other == null) {
      return;
    }
    if (other.EventType.Length != 0) {
      EventType = other.EventType;
    }
    attributes_.Add(other.attributes_);
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EventType = input.ReadString();
          break;
        }
        case 18: {
          attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Event message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    /// <summary>
    /// Transparent data defined by the event_type.
    /// </summary>
    public sealed partial class Attribute : pb::IMessage<Attribute> {
      private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Event.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Attribute() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Attribute(Attribute other) : this() {
        key_ = other.key_;
        value_ = other.value_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Attribute Clone() {
        return new Attribute(this);
      }

      /// <summary>Field number for the "key" field.</summary>
      public const int KeyFieldNumber = 1;
      private string key_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Key {
        get { return key_; }
        set {
          key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 2;
      private string value_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Value {
        get { return value_; }
        set {
          value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Attribute);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Attribute other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Key != other.Key) return false;
        if (Value != other.Value) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Key.Length != 0) hash ^= Key.GetHashCode();
        if (Value.Length != 0) hash ^= Value.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Key.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Key);
        }
        if (Value.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Value);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Key.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
        }
        if (Value.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Attribute other) {
        if (other == null) {
          return;
        }
        if (other.Key.Length != 0) {
          Key = other.Key;
        }
        if (other.Value.Length != 0) {
          Value = other.Value;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 18: {
              Value = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class EventList : pb::IMessage<EventList> {
  private static readonly pb::MessageParser<EventList> _parser = new pb::MessageParser<EventList>(() => new EventList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EventsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventList(EventList other) : this() {
    events_ = other.events_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventList Clone() {
    return new EventList(this);
  }

  /// <summary>Field number for the "events" field.</summary>
  public const int EventsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Event> _repeated_events_codec
      = pb::FieldCodec.ForMessage(10, global::Event.Parser);
  private readonly pbc::RepeatedField<global::Event> events_ = new pbc::RepeatedField<global::Event>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Event> Events {
    get { return events_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!events_.Equals(other.events_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= events_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    events_.WriteTo(output, _repeated_events_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += events_.CalculateSize(_repeated_events_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventList other) {
    if (other == null) {
      return;
    }
    events_.Add(other.events_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          events_.AddEntriesFrom(input, _repeated_events_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class EventFilter : pb::IMessage<EventFilter> {
  private static readonly pb::MessageParser<EventFilter> _parser = new pb::MessageParser<EventFilter>(() => new EventFilter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EventsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilter(EventFilter other) : this() {
    key_ = other.key_;
    matchString_ = other.matchString_;
    filterType_ = other.filterType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilter Clone() {
    return new EventFilter(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private string key_ = "";
  /// <summary>
  /// EventFilter is used when subscribing to events to limit the events
  /// received within a given event type. See
  /// validator/server/events/subscription.py for further explanation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Key {
    get { return key_; }
    set {
      key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "match_string" field.</summary>
  public const int MatchStringFieldNumber = 2;
  private string matchString_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MatchString {
    get { return matchString_; }
    set {
      matchString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "filter_type" field.</summary>
  public const int FilterTypeFieldNumber = 3;
  private global::EventFilter.Types.FilterType filterType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventFilter.Types.FilterType FilterType {
    get { return filterType_; }
    set {
      filterType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    if (MatchString != other.MatchString) return false;
    if (FilterType != other.FilterType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Key.Length != 0) hash ^= Key.GetHashCode();
    if (MatchString.Length != 0) hash ^= MatchString.GetHashCode();
    if (FilterType != 0) hash ^= FilterType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Key.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Key);
    }
    if (MatchString.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MatchString);
    }
    if (FilterType != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FilterType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Key.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
    }
    if (MatchString.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchString);
    }
    if (FilterType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilterType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventFilter other) {
    if (other == null) {
      return;
    }
    if (other.Key.Length != 0) {
      Key = other.Key;
    }
    if (other.MatchString.Length != 0) {
      MatchString = other.MatchString;
    }
    if (other.FilterType != 0) {
      FilterType = other.FilterType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Key = input.ReadString();
          break;
        }
        case 18: {
          MatchString = input.ReadString();
          break;
        }
        case 24: {
          filterType_ = (global::EventFilter.Types.FilterType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the EventFilter message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum FilterType {
      [pbr::OriginalName("FILTER_TYPE_UNSET")] Unset = 0,
      [pbr::OriginalName("SIMPLE_ANY")] SimpleAny = 1,
      [pbr::OriginalName("SIMPLE_ALL")] SimpleAll = 2,
      [pbr::OriginalName("REGEX_ANY")] RegexAny = 3,
      [pbr::OriginalName("REGEX_ALL")] RegexAll = 4,
    }

  }
  #endregion

}

public sealed partial class EventSubscription : pb::IMessage<EventSubscription> {
  private static readonly pb::MessageParser<EventSubscription> _parser = new pb::MessageParser<EventSubscription>(() => new EventSubscription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventSubscription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EventsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventSubscription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventSubscription(EventSubscription other) : this() {
    eventType_ = other.eventType_;
    filters_ = other.filters_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventSubscription Clone() {
    return new EventSubscription(this);
  }

  /// <summary>Field number for the "event_type" field.</summary>
  public const int EventTypeFieldNumber = 1;
  private string eventType_ = "";
  /// <summary>
  /// EventSubscription is used when subscribing to events to specify the type
  /// of events being subscribed to, along with any additional filters. See
  /// validator/server/events/subscription.py for further explanation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EventType {
    get { return eventType_; }
    set {
      eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "filters" field.</summary>
  public const int FiltersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::EventFilter> _repeated_filters_codec
      = pb::FieldCodec.ForMessage(18, global::EventFilter.Parser);
  private readonly pbc::RepeatedField<global::EventFilter> filters_ = new pbc::RepeatedField<global::EventFilter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EventFilter> Filters {
    get { return filters_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventSubscription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventSubscription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventType != other.EventType) return false;
    if(!filters_.Equals(other.filters_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventType.Length != 0) hash ^= EventType.GetHashCode();
    hash ^= filters_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventType.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(EventType);
    }
    filters_.WriteTo(output, _repeated_filters_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
    }
    size += filters_.CalculateSize(_repeated_filters_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventSubscription other) {
    if (other == null) {
      return;
    }
    if (other.EventType.Length != 0) {
      EventType = other.EventType;
    }
    filters_.Add(other.filters_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EventType = input.ReadString();
          break;
        }
        case 18: {
          filters_.AddEntriesFrom(input, _repeated_filters_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
