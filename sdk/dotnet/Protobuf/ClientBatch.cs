// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: client_batch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from client_batch.proto</summary>
public static partial class ClientBatchReflection {

  #region Descriptor
  /// <summary>File descriptor for client_batch.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ClientBatchReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJjbGllbnRfYmF0Y2gucHJvdG8aC2JhdGNoLnByb3RvGhljbGllbnRfbGlz",
          "dF9jb250cm9sLnByb3RvIokBChZDbGllbnRCYXRjaExpc3RSZXF1ZXN0Eg8K",
          "B2hlYWRfaWQYASABKAkSEQoJYmF0Y2hfaWRzGAIgAygJEiUKBnBhZ2luZxgD",
          "IAEoCzIVLkNsaWVudFBhZ2luZ0NvbnRyb2xzEiQKB3NvcnRpbmcYBCADKAsy",
          "Ey5DbGllbnRTb3J0Q29udHJvbHMitwIKF0NsaWVudEJhdGNoTGlzdFJlc3Bv",
          "bnNlEi8KBnN0YXR1cxgBIAEoDjIfLkNsaWVudEJhdGNoTGlzdFJlc3BvbnNl",
          "LlN0YXR1cxIXCgdiYXRjaGVzGAIgAygLMgYuQmF0Y2gSDwoHaGVhZF9pZBgD",
          "IAEoCRIlCgZwYWdpbmcYBCABKAsyFS5DbGllbnRQYWdpbmdSZXNwb25zZSKZ",
          "AQoGU3RhdHVzEhAKDFNUQVRVU19VTlNFVBAAEgYKAk9LEAESEgoOSU5URVJO",
          "QUxfRVJST1IQAhINCglOT1RfUkVBRFkQAxILCgdOT19ST09UEAQSDwoLTk9f",
          "UkVTT1VSQ0UQBRISCg5JTlZBTElEX1BBR0lORxAGEhAKDElOVkFMSURfU09S",
          "VBAHEg4KCklOVkFMSURfSUQQCCIpChVDbGllbnRCYXRjaEdldFJlcXVlc3QS",
          "EAoIYmF0Y2hfaWQYASABKAkiuAEKFkNsaWVudEJhdGNoR2V0UmVzcG9uc2US",
          "LgoGc3RhdHVzGAEgASgOMh4uQ2xpZW50QmF0Y2hHZXRSZXNwb25zZS5TdGF0",
          "dXMSFQoFYmF0Y2gYAiABKAsyBi5CYXRjaCJXCgZTdGF0dXMSEAoMU1RBVFVT",
          "X1VOU0VUEAASBgoCT0sQARISCg5JTlRFUk5BTF9FUlJPUhACEg8KC05PX1JF",
          "U09VUkNFEAUSDgoKSU5WQUxJRF9JRBAIQisKFXNhd3Rvb3RoLnNkay5wcm90",
          "b2J1ZlABWhBjbGllbnRfYmF0Y2hfcGIyYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BatchReflection.Descriptor, global::ClientListControlReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchListRequest), global::ClientBatchListRequest.Parser, new[]{ "HeadId", "BatchIds", "Paging", "Sorting" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchListResponse), global::ClientBatchListResponse.Parser, new[]{ "Status", "Batches", "HeadId", "Paging" }, null, new[]{ typeof(global::ClientBatchListResponse.Types.Status) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchGetRequest), global::ClientBatchGetRequest.Parser, new[]{ "BatchId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientBatchGetResponse), global::ClientBatchGetResponse.Parser, new[]{ "Status", "Batch" }, null, new[]{ typeof(global::ClientBatchGetResponse.Types.Status) }, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// A request to return a list of batches from the validator. May include the id
/// of a particular block to be the `head` of the chain being requested. In that
/// case the list will include the batches from that block, and all batches
/// previous to that block on the chain. Filter with specific `batch_ids`.
/// </summary>
public sealed partial class ClientBatchListRequest : pb::IMessage<ClientBatchListRequest> {
  private static readonly pb::MessageParser<ClientBatchListRequest> _parser = new pb::MessageParser<ClientBatchListRequest>(() => new ClientBatchListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchListRequest(ClientBatchListRequest other) : this() {
    headId_ = other.headId_;
    batchIds_ = other.batchIds_.Clone();
    Paging = other.paging_ != null ? other.Paging.Clone() : null;
    sorting_ = other.sorting_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchListRequest Clone() {
    return new ClientBatchListRequest(this);
  }

  /// <summary>Field number for the "head_id" field.</summary>
  public const int HeadIdFieldNumber = 1;
  private string headId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeadId {
    get { return headId_; }
    set {
      headId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "batch_ids" field.</summary>
  public const int BatchIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_batchIds_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> batchIds_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> BatchIds {
    get { return batchIds_; }
  }

  /// <summary>Field number for the "paging" field.</summary>
  public const int PagingFieldNumber = 3;
  private global::ClientPagingControls paging_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientPagingControls Paging {
    get { return paging_; }
    set {
      paging_ = value;
    }
  }

  /// <summary>Field number for the "sorting" field.</summary>
  public const int SortingFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ClientSortControls> _repeated_sorting_codec
      = pb::FieldCodec.ForMessage(34, global::ClientSortControls.Parser);
  private readonly pbc::RepeatedField<global::ClientSortControls> sorting_ = new pbc::RepeatedField<global::ClientSortControls>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ClientSortControls> Sorting {
    get { return sorting_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HeadId != other.HeadId) return false;
    if(!batchIds_.Equals(other.batchIds_)) return false;
    if (!object.Equals(Paging, other.Paging)) return false;
    if(!sorting_.Equals(other.sorting_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HeadId.Length != 0) hash ^= HeadId.GetHashCode();
    hash ^= batchIds_.GetHashCode();
    if (paging_ != null) hash ^= Paging.GetHashCode();
    hash ^= sorting_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HeadId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HeadId);
    }
    batchIds_.WriteTo(output, _repeated_batchIds_codec);
    if (paging_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Paging);
    }
    sorting_.WriteTo(output, _repeated_sorting_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HeadId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadId);
    }
    size += batchIds_.CalculateSize(_repeated_batchIds_codec);
    if (paging_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
    }
    size += sorting_.CalculateSize(_repeated_sorting_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchListRequest other) {
    if (other == null) {
      return;
    }
    if (other.HeadId.Length != 0) {
      HeadId = other.HeadId;
    }
    batchIds_.Add(other.batchIds_);
    if (other.paging_ != null) {
      if (paging_ == null) {
        paging_ = new global::ClientPagingControls();
      }
      Paging.MergeFrom(other.Paging);
    }
    sorting_.Add(other.sorting_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HeadId = input.ReadString();
          break;
        }
        case 18: {
          batchIds_.AddEntriesFrom(input, _repeated_batchIds_codec);
          break;
        }
        case 26: {
          if (paging_ == null) {
            paging_ = new global::ClientPagingControls();
          }
          input.ReadMessage(paging_);
          break;
        }
        case 34: {
          sorting_.AddEntriesFrom(input, _repeated_sorting_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// A response that lists batches from newest to oldest.
///
/// Statuses:
///   * OK - everything worked as expected
///   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
///   * NOT_READY - the validator does not yet have a genesis block
///   * NO_ROOT - the head block specified was not found
///   * NO_RESOURCE - no batches were found with the parameters specified
///   * INVALID_PAGING - the paging controls were malformed or out of range
///   * INVALID_SORT - the sorting controls were malformed or invalid
/// </summary>
public sealed partial class ClientBatchListResponse : pb::IMessage<ClientBatchListResponse> {
  private static readonly pb::MessageParser<ClientBatchListResponse> _parser = new pb::MessageParser<ClientBatchListResponse>(() => new ClientBatchListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchListResponse(ClientBatchListResponse other) : this() {
    status_ = other.status_;
    batches_ = other.batches_.Clone();
    headId_ = other.headId_;
    Paging = other.paging_ != null ? other.Paging.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchListResponse Clone() {
    return new ClientBatchListResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ClientBatchListResponse.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientBatchListResponse.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "batches" field.</summary>
  public const int BatchesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Batch> _repeated_batches_codec
      = pb::FieldCodec.ForMessage(18, global::Batch.Parser);
  private readonly pbc::RepeatedField<global::Batch> batches_ = new pbc::RepeatedField<global::Batch>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Batch> Batches {
    get { return batches_; }
  }

  /// <summary>Field number for the "head_id" field.</summary>
  public const int HeadIdFieldNumber = 3;
  private string headId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeadId {
    get { return headId_; }
    set {
      headId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "paging" field.</summary>
  public const int PagingFieldNumber = 4;
  private global::ClientPagingResponse paging_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientPagingResponse Paging {
    get { return paging_; }
    set {
      paging_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if(!batches_.Equals(other.batches_)) return false;
    if (HeadId != other.HeadId) return false;
    if (!object.Equals(Paging, other.Paging)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    hash ^= batches_.GetHashCode();
    if (HeadId.Length != 0) hash ^= HeadId.GetHashCode();
    if (paging_ != null) hash ^= Paging.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    batches_.WriteTo(output, _repeated_batches_codec);
    if (HeadId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HeadId);
    }
    if (paging_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Paging);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    size += batches_.CalculateSize(_repeated_batches_codec);
    if (HeadId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadId);
    }
    if (paging_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    batches_.Add(other.batches_);
    if (other.HeadId.Length != 0) {
      HeadId = other.HeadId;
    }
    if (other.paging_ != null) {
      if (paging_ == null) {
        paging_ = new global::ClientPagingResponse();
      }
      Paging.MergeFrom(other.Paging);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          status_ = (global::ClientBatchListResponse.Types.Status) input.ReadEnum();
          break;
        }
        case 18: {
          batches_.AddEntriesFrom(input, _repeated_batches_codec);
          break;
        }
        case 26: {
          HeadId = input.ReadString();
          break;
        }
        case 34: {
          if (paging_ == null) {
            paging_ = new global::ClientPagingResponse();
          }
          input.ReadMessage(paging_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ClientBatchListResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("STATUS_UNSET")] Unset = 0,
      [pbr::OriginalName("OK")] Ok = 1,
      [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 2,
      [pbr::OriginalName("NOT_READY")] NotReady = 3,
      [pbr::OriginalName("NO_ROOT")] NoRoot = 4,
      [pbr::OriginalName("NO_RESOURCE")] NoResource = 5,
      [pbr::OriginalName("INVALID_PAGING")] InvalidPaging = 6,
      [pbr::OriginalName("INVALID_SORT")] InvalidSort = 7,
      [pbr::OriginalName("INVALID_ID")] InvalidId = 8,
    }

  }
  #endregion

}

/// <summary>
/// Fetches a specific batch by its id (header_signature) from the blockchain.
/// </summary>
public sealed partial class ClientBatchGetRequest : pb::IMessage<ClientBatchGetRequest> {
  private static readonly pb::MessageParser<ClientBatchGetRequest> _parser = new pb::MessageParser<ClientBatchGetRequest>(() => new ClientBatchGetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchGetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchGetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchGetRequest(ClientBatchGetRequest other) : this() {
    batchId_ = other.batchId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchGetRequest Clone() {
    return new ClientBatchGetRequest(this);
  }

  /// <summary>Field number for the "batch_id" field.</summary>
  public const int BatchIdFieldNumber = 1;
  private string batchId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BatchId {
    get { return batchId_; }
    set {
      batchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchGetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchGetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BatchId != other.BatchId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BatchId.Length != 0) hash ^= BatchId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BatchId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(BatchId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BatchId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchGetRequest other) {
    if (other == null) {
      return;
    }
    if (other.BatchId.Length != 0) {
      BatchId = other.BatchId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BatchId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// A response that returns the batch specified by a ClientBatchGetRequest.
///
/// Statuses:
///   * OK - everything worked as expected, batch has been fetched
///   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
///   * NO_RESOURCE - no batch with the specified id exists
/// </summary>
public sealed partial class ClientBatchGetResponse : pb::IMessage<ClientBatchGetResponse> {
  private static readonly pb::MessageParser<ClientBatchGetResponse> _parser = new pb::MessageParser<ClientBatchGetResponse>(() => new ClientBatchGetResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientBatchGetResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientBatchReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchGetResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchGetResponse(ClientBatchGetResponse other) : this() {
    status_ = other.status_;
    Batch = other.batch_ != null ? other.Batch.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientBatchGetResponse Clone() {
    return new ClientBatchGetResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ClientBatchGetResponse.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientBatchGetResponse.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "batch" field.</summary>
  public const int BatchFieldNumber = 2;
  private global::Batch batch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Batch Batch {
    get { return batch_; }
    set {
      batch_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientBatchGetResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientBatchGetResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (!object.Equals(Batch, other.Batch)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (batch_ != null) hash ^= Batch.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (batch_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Batch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (batch_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Batch);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientBatchGetResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.batch_ != null) {
      if (batch_ == null) {
        batch_ = new global::Batch();
      }
      Batch.MergeFrom(other.Batch);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          status_ = (global::ClientBatchGetResponse.Types.Status) input.ReadEnum();
          break;
        }
        case 18: {
          if (batch_ == null) {
            batch_ = new global::Batch();
          }
          input.ReadMessage(batch_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ClientBatchGetResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("STATUS_UNSET")] Unset = 0,
      [pbr::OriginalName("OK")] Ok = 1,
      [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 2,
      [pbr::OriginalName("NO_RESOURCE")] NoResource = 5,
      [pbr::OriginalName("INVALID_ID")] InvalidId = 8,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
