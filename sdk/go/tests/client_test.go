package tests

import (
    "testing"
    . "sawtooth_sdk/client"
)

var (
  data = []byte{0x01, 0x02, 0x03}
  WIFSTR = "5J7bEeWs14sKkz7yVHfVc2FXKfBe6Hb5oNZxxTKqKZCgjbDTuUj"
  PUBSTR = "035e1de3048a62f9f478440a22fd7655b80f0aac997be963b119ac54b3bfdea3b7"
  SIGSTR = "0062bc154dca72472e66062c4539c8befb2680d79d59b3cc539dd182ff36072b199adc1118db5fc1884d50cdec9d31a2356af03175439ccb841c7b0e3ae83297"
  ENCDED = "0acc0a0aca020aabb030ab0020a423033356531646533303438613632663966343738343430613232666437363535623830663061616339393762653936336231313961633534623362666465613362371a0361626322033132332a0364656632033132333a03646566420a6d79656e636f64696e674aa030102031abb030ab0020a423033356531646533303438613632663966343738343430613232666437363535623830663061616339393762653936336231313961633534623362666465613362371a0361626322033132332a0364656632033435363a03676869420a6d79656e636f64696e674aa03010203"
)

func TestSigning(t *testing.T) {
    priv := GenPrivKey()
    pub := GenPubKey(priv)
    sig := Sign(data, priv)
    if !Verify(data, sig, pub) {
        t.Error(
            "Couldn't verify generated signature",
            priv, pub, sig,
        )
    }
}

func TestEncoding(t *testing.T) {
    priv := WifToPriv(WIFSTR)
    if PrivToWif(priv) != WIFSTR {
        t.Error("Private key is different after encoding/decoding")
    }

    pubstr := MustEncode(GenPubKey(priv))
    if pubstr != PUBSTR {
        t.Error("Public key doesn't match expected. Got", pubstr)
    }
    pub := MustDecode(pubstr)
    if len(pub) != 33 {
        t.Error("Encoded pubkey wrong length. Should be 33, but is", len(pub))
    }

    sigstr := MustEncode(Sign(data, priv))
    if sigstr != SIGSTR {
        t.Error("Signature doesn't match expected. Got", sigstr)
    }
}

func TestEncoder(t *testing.T) {
    priv := WifToPriv(WIFSTR)

    encoder := NewEncoder(priv, TransactionParams{
        FamilyName: "abc",
        FamilyVersion: "123",
        PayloadEncoding: "myencoding",
        Inputs: []string{"def"},
    })

    txn1 := encoder.NewTransaction(data, TransactionParams{
        Nonce: "123",
        Outputs: []string{"def"},
    })

    pubstr := MustEncode(GenPubKey(priv))
    txn2 := encoder.NewTransaction(data, TransactionParams{
        Nonce: "456",
        Outputs: []string{"ghi"},
        BatcherPubkey: pubstr,
    })

    // Test serialization
    txns, err := ParseTransactions(SerializeTransactions([]*Transaction{txn1, txn2}))
    if err != nil {
        t.Error(err)
    }

    batch := encoder.NewBatch(txns)

    // Test serialization
    batches, err := ParseBatches(SerializeBatches([]*Batch{batch}))
    if err != nil {
        t.Error(err)
    }
    data := SerializeBatches(batches)
    datastr := MustEncode(data)

    expected := ENCDED

    if datastr != expected {
        t.Error("Did not correctly encode batch. Got", datastr)
    }
}
