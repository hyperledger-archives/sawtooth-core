# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'rbconfig'
require 'yaml'

# Check bash script for CRLFs
crlf_count=0

Dir.glob('*.sh') do |item|
 if open(item).grep(/\r/).length > 0
  crlf_count+=1
 end
end

Dir.glob('bootstrap.d/*.sh') do |item|
 if open(item).grep(/\r/).length > 0
  crlf_count+=1
 end
end

if crlf_count > 0
  puts "One or more bash scripts contain CRLF line endings. Please check out"
  puts "Sawtooth Lake again with the git setting 'core.autocrlf' set to false"
  puts "in your git configuration."
  puts "See https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration"
  puts "for more information on this setting."
  exit(false)
end

VAGRANTFILE_API_VERSION = "2"

def load_conf()
    config = {
        'VAGRANT_BOX' => 'ubuntu/xenial64',
        'VAGRANT_FORWARD_PORTS' => true,
        'VAGRANT_MEMORY' => 2048,
        'VAGRANT_CPUS' => 2
    }

    if RbConfig::CONFIG['host_os'] !~ /mswin|mingw/
        bash_binary = `which bash`.strip
        env = `#{bash_binary} -c 'source conf.sh; printenv'`
        env_conf = Hash[env.split(/\n/).map {|l| l.split(/=/, 2)}]
        for key in['VAGRANT_FORWARD_PORTS']
            if env_conf.has_key? key
                if env_conf[key] == '1'
                    env_conf[key] = true
                else
                    env_conf[key] = false
                end
            end
        end
        for key in['VAGRANT_MEMORY', 'VAGRANT_CPUS']
            if env_conf.has_key? key
                env_conf[key] = env_conf[key].to_s
            end
        end
        config.merge! env_conf.select { |k| config.keys.include? k }
    end

    if File.file?('vagrant.local.yaml')
        yaml_conf = YAML.load_file 'vagrant.local.yaml'
        config.merge! yaml_conf.select { |k| config.keys.include? k }
    end

    return config
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  conf = load_conf()
  if ARGV.include? "up"
    conf.each_pair {|key,value| puts "#{key} = #{value}"}

    if Vagrant.has_plugin?("vagrant-proxyconf") and (ENV["http_proxy"] or ENV["https_proxy"])
        puts "Configuring proxyconf plugin!"
        if ENV["http_proxy"]
            puts "http_proxy: " + ENV["http_proxy"]
            config.proxy.http     = ENV["http_proxy"]
        end
        if ENV["https_proxy"]
            puts "https_proxy: " + ENV["https_proxy"]
            config.proxy.https    = ENV["https_proxy"]
        end
        if ENV["no_proxy"]
            puts "no_proxy: " + ENV["no_proxy"]
            config.proxy.no_proxy = ENV["no_proxy"]
        end
    elsif ENV["http_proxy"] or ENV["https_proxy"]
        puts "Proxyconf plugin not found"
        puts "Install: vagrant plugin install vagrant-proxyconf"
    end
  end

  config.vm.provider "virtualbox" do |v|
    v.name = 'sawtooth'
    v.memory = conf['VAGRANT_MEMORY']
    v.cpus = conf['VAGRANT_CPUS']
  end

  config.vm.box = conf['VAGRANT_BOX']

  if conf['VAGRANT_FORWARD_PORTS']
      config.vm.network "forwarded_port", guest: 8800, host: 8800, host_ip: "127.0.0.1"
      config.vm.network "forwarded_port", guest: 4004, host: 4004, host_ip: "127.0.0.1"

      # rest api
      config.vm.network "forwarded_port", guest: 8080, host: 18080, host_ip: "127.0.0.1"
  end
  config.vm.provision :shell, path: "bootstrap.sh"

  config.vm.synced_folder "../../", "/project"
end
