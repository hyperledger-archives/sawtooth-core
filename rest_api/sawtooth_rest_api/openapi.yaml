swagger: '2.0'

info:
  version: "0.8.0"
  title: Sawtooth Lake REST API
  description: |
    _This HTTP pragmatic REST API is built on top of Sawtooth
    Lake's existing ZMQ/Protobuf infrastructure, simplifying client
    interaction with the blockchain by exposing endpoints that
    use common HTTP/JSON standards._

paths:
  /batches:
    post:
      summary: Sends a BatchList to the validator
      description: >
        Accepts a protobuf formatted `BatchList` as an octet-stream
        binary file and submits it to the validator to be
        committed. Note that since the submitted batches are not yet on the
        blockchain, there will be no `data` object returned with
        the response, just a `link` to check the committed status.
      consumes:
        - application/octet-stream
      parameters:
        -
          name: BatchList
          in: body
          description: A binary encoded protobuf BatchList
          schema:
            $ref: "#/definitions/BatchList"
          required: true
        -
          name: callback
          in: query
          type: string
          description: Callback url
      responses:
        202:
          description: Successfully submitted BatchList
          schema:
            properties:
              link:
                $ref: "#/definitions/Link"
        400:
          $ref: "#/responses/400BadRequest"
        422:
          $ref: "#/responses/422UnprocessableEntity"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
    get:
      summary: Fetches a list of batches
      description: >
        Fetches a paginated list of batches from the validator.
      parameters:
        - $ref: "#/parameters/head"
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min_position"
        - $ref: "#/parameters/max_position"
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved batches
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Batch"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /batches/{batch_id}:
    parameters:
      - $ref: "#/parameters/batch_id"
    get:
      summary: Fetches a particular batch
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved batch
          schema:
            properties:
              data:
                $ref: "#/definitions/Batch"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"
        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /batch_status:
    get:
      summary: Fetches a list of the committed statuses for a set of batches
      description: >
        Fetches a list of statuses for a batch or batches. The
        batch(es) you want to check can be specified using the
        `id` filter parameter. Note that this route does not
        return a full resource, and the response body will
        _not_ include the `head` or `paging` properties.
      parameters:
        - name: id
          in: query
          description: A comma seperated list of batch ids
          type: string
          required: true
      responses:
        200:
          description: Successfully retrieved statuses
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/BatchStatus"
              link:
                $ref: "#/definitions/Link"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /state:
    get:
      summary: Fetches the data for the current state
      description: >
        Fetches a paginated list of leaves for the current state, or relative
        to a particular head block. Using the `address` filter parameter, will
        narrow the list to any leaves that have an address beginning with the
        characters specified.
      parameters:
        - $ref: "#/parameters/head"
        - name: address
          in: query
          type: string
          description: A partial address to filter leaves by
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min_position"
        - $ref: "#/parameters/max_position"
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved state data
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Leaf"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /state/{address}:
    parameters:
      - $ref: "#/parameters/address"
    get:
      summary: Fetches a particular leaf from the current state
      parameters:
        - $ref: "#/parameters/head"
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully fetched leaves
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Leaf"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /blocks:
    get:
      summary: Fetches a list of blocks
      description: >
        Fetches a paginated list of blocks from the validator.
      parameters:
        - $ref: "#/parameters/head"
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min_position"
        - $ref: "#/parameters/max_position"
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved blocks
          schema:
            properties:
              data:
                type: array
                items:
                  - $ref: "#/definitions/Block"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /blocks/{block_id}:
    parameters:
      - $ref: "#/parameters/block_id"
    get:
      summary: Fetches a particlar block
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved block
          schema:
            properties:
              data:
                $ref: "#/definitions/Block"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"

        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /transactions:
    get:
      summary: Fetches a list of transactions
      description: >
        Fetches a paginated list of transactions from the validator.
      parameters:
        - $ref: "#/parameters/head"
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/min_position"
        - $ref: "#/parameters/max_position"
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved transactions
          schema:
            properties:
              data:
                type: array
                items:
                  - $ref: "#/definitions/Transaction"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"
              paging:
                $ref: "#/definitions/Paging"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /transactions/{transaction_id}:
    parameters:
      - $ref: "#/parameters/transaction_id"
    get:
      summary: Fetches a particular transaction
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully retrieved transaction
          schema:
            properties:
              data:
                $ref: "#/definitions/Block"
              head:
                $ref: "#/definitions/Head"
              link:
                $ref: "#/definitions/Link"

        400:
          $ref: "#/responses/400BadRequest"
        404:
          $ref: "#/responses/404NotFound"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /stats/validator:
    get:
      summary: Fetches metrics for the validator processing blocks
      description: >
        Fetches a snapshot of metrics relating to this validator's
        processing of blocks. These metrics are raw totals of
        various validator processes, and any processing of the data
        will depend on the clients consuming it. These totals are
        further broken down by types of Transaction Processor.
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully fetched validator stats
          schema:
            properties:
              data:
                $ref: "#/definitions/ValidatorStats"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /stats/gossip:
    get:
      summary: Fetches metrics for inter-validator communication
      description: >
        Fetches a snapshot of metrics relating to this validator's
        communication with peer validators. These metrics represent
        raw totals, and any processing of the data will depend on
        the clients consuming it. These totals are further broken
        down by the ids of peers.
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully fetched gossip stats
          schema:
            properties:
              data:
                $ref: "#/definitions/GossipStats"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /status/config:
    get:
      summary: Fetches the current configuration of the validator
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully fetched validator config
          schema:
            properties:
              data:
                $ref: "#/definitions/ConfigStatus"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /status/system:
    get:
      summary: Fetches the current status of the system the validator is on
      parameters:
        - $ref: "#/parameters/fields"
        - $ref: "#/parameters/omit"
      responses:
        200:
          description: Successfully fetched system status
          schema:
            properties:
              data:
                $ref: "#/definitions/SystemStatus"
        400:
          $ref: "#/responses/400BadRequest"
        500:
          $ref: "#/responses/500ServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

responses:
  400BadRequest:
    description: Request was malformed
    schema:
      $ref: "#/definitions/ErrorList"
  404NotFound:
    description: Address, prefix, or root did not match any resource
    schema:
      $ref: "#/definitions/ErrorList"
  422UnprocessableEntity:
    description: Submitted Batch was improperly signed
    schema:
      $ref: "#/definitions/ErrorList"
  500ServerError:
    description: Something went wrong with the server
    schema:
      $ref: "#/definitions/ErrorList"
  503ServiceUnavailable:
    description: API is unable to reach the validator
    schema:
      $ref: "#/definitions/ErrorList"

parameters:
  address:
    name: address
    in: path
    type: string
    required: true
    description: Radix address of a leaf, or prefix for leaves
  block_id:
    name: block_id
    in: path
    type: string
    required: true
    description: Block id
  batch_id:
    name: batch_id
    in: path
    type: string
    required: true
    description: Batch id
  transaction_id:
    name: transaction_id
    in: path
    type: string
    required: true
    description: Trainsaction id
  head:
    name: head
    in: query
    type: string
    default: latest
    description: Index or id of head block
  fields:
    name: fields
    in: query
    type: string
    description: Comma separated list of fields to include in response, defaults to all
  omit:
    name: omit
    in: query
    type: string
    description: Comma separated list of fields to omit from response, defaults to none
  count:
    name: count
    in: query
    type: integer
    default: 1000
    description: Number of items to return
  min_position:
    name: min_position
    in: query
    type: string
    description: Id/index to start paging (inclusive)
  max_position:
    name: max_position
    in: query
    type: string
    description: Id/index to end paging (non-inclusive)
  sort:
    name: sort
    in: query
    type: string
    description: Field to sort a list by, `-` reverses order

definitions:
  Head:
    type: string
    example: HOAHrdXa1MUUbScI4eF0wVuzg4v5wYKZz6j7rsrWSwLKWUd/cO/XhKOd5oe/PeXKhhS+Tv6nRFxIwFHrrIddlsY=
  Link:
    type: string
    example: https://api.sawtooth.com/state?head=HOAHrdXa1MUUbScI4eF0wVuzg4v5wYKZz6j7rsrWSwLKWUd/cO/XhKOd5oe/PeXKhhS+Tv6nRFxIwFHrrIddlsY=&min_position=1001
  Paging:
    properties:
      next_position:
        type: string
        example: 2001
      total_count:
        type: integer
        example: 54321
      previous:
        type: string
        example: https://api.sawtooth.com/state?max_position=1001
      next:
        type: string
        example: https://api.sawtooth.com/state?min_position=2001

  Error:
    properties:
      message:
        type: string
        example: Batch failed signature validation
      code:
        type: integer
        example: 34
      data:
        type: object
  ErrorList:
    properties:
      errors:
        type: array
        items:
          $ref: "#/definitions/Error"

  Leaf:
    properties:
      address:
        type: string
        example: 1cf12632a292f6ddf757a0a59e9c2284c08cab235aa068b19f85c460f71485540368eec98c3f95af23b0c8cda4790c118238a3b97f2fba2bbff72f15987f00b41e7caf
      data:
        type: string
        format: byte
        example: oWZrbldVcmQZSRk=

  TransactionHeader:
    properties:
      batcher_pubkey:
        type: string
        example: 16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM
      dependencies:
        type: array
        items:
          type: string
          example: 1baee350bdb60bcee60e3d325d43283cf830b4c23b2cb17d3bb43935bd7af3761c2bee79847c72a9e396a9ae58f48add4e43f94eb83f84442c6085c1dd5d4dbe
      family_name:
        type: string
        example: intkey
      family_version:
        type: string
        example: "1.0"
      inputs:
        type: array
        items:
          type: string
          example: 1cf12632a292f6ddf757a0a59e9c2284c08cab235aa068b19f85c460f71485540368eec98c3f95af23b0c8cda4790c118238a3b97f2fba2bbff72f15987f00b41e7caf
      nonce:
        type: string
        example: QAApS4L
      outputs:
        type: array
        items:
          type: string
          example: 1cf12632a292f6ddf757a0a59e9c2284c08cab235aa068b19f85c460f71485540368eec98c3f95af23b0c8cda4790c118238a3b97f2fba2bbff72f15987f00b41e7caf
      payload_encoding:
        type: string
        example: application/cbor
      payload_sha512:
        type: string
        example: fb6135ef73f4fe77367f9384b3bbbb158f4b8603c9d612157108e5c271868fce2242ee4abd7a29397ba63780c3ccab13783dfd4d9f0167beda03cdb0e37b87f4
      signer_pubkey:
        type: string
        example: 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2
  Transaction:
    properties:
      header:
        $ref: "#/definitions/TransactionHeader"
      header_signature:
        type: string
        example: GwW07DtqHLEM0gEP/V7LkyGdcbHpAp9aAVSr6Kc3da7jKhqh7F4LVQcRMAstfEkr3gHqUovEg38TczxtBuctC8c=
      payload:
        type: string
        format: binary

  BatchHeader:
    properties:
      signer_pubkey:
        type: string
        example: 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2
      transaction_ids:
        type: array
        items:
          type: string
          example: GwW07DtqHLEM0gEP/V7LkyGdcbHpAp9aAVSr6Kc3da7jKhqh7F4LVQcRMAstfEkr3gHqUovEg38TczxtBuctC8c=
  Batch:
    properties:
      header:
        $ref: "#/definitions/BatchHeader"
      header_signature:
        type: string
        example: G6aZORKtrD3KJP0Xii6Y0ahFqAADnUAKdflo6NQNWV9bLljoOI3YOlPMduHwIPgUSBAVU7sEpUtjPpOwfMWEWkM=
      transactions:
        type: array
        items:
          $ref: "#/definitions/Transaction"
  BatchList:
    properties:
      batches:
        type: array
        items:
          $ref: "#/definitions/Batch"
  BatchStatus:
    properties:
      status:
        type: string
        example: PENDING
        enum:
          - PENDING
          - REJECTED
          - COMMITTED

  BlockHeader:
    properties:
      block_num:
        type: integer
        example: 12345
      previous_block_id:
        type: string
        example: HOAHrdXa1MUUbScI4eF0wVuzg4v5wYKZz6j7rsrWSwLKWUd/cO/XhKOd5oe/PeXKhhS+Tv6nRFxIwFHrrIddlsY=
      signer_pubkey:
        type: string
        example: 16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM
      batch_ids:
        type: array
        items:
          type: string
          example: G6aZORKtrD3KJP0Xii6Y0ahFqAADnUAKdflo6NQNWV9bLljoOI3YOlPMduHwIPgUSBAVU7sEpUtjPpOwfMWEWkM=
      consensus:
        type: string
        format: binary
      state_root_hash:
        type: string
        example: 708ca7fbb701799bb387f2e50deaca402e8502abe229f705693d2d4f350e1ad6
  Block:
    properties:
      header:
        $ref: "#/definitions/BlockHeader"
      header_signature:
        type: string
        example: HOAHrdXa1MUUbScI4eF0wVuzg4v5wYKZz6j7rsrWSwLKWUd/cO/XhKOd5oe/PeXKhhS+Tv6nRFxIwFHrrIddlsY=
      batches:
        type: array
        items:
          $ref: "#/definitions/Batch"

  Timestamp:
    properties:
      timestamp:
        type: string
        format: date-time
        example: 2017-01-29T18:50:07Z
  BaseValidatorStats:
    properties:
      blocks:
        properties:
          committed:
            type: integer
            example: 42
          rolledback:
            type: integer
            example: 17
          claimed:
            type: integer
            example: 3
      batches:
        properties:
          committed:
            type: integer
            example: 84
          rolledback:
            type: integer
            example: 34
          invalid:
            type: integer
            example: 12
      transactions:
        properties:
          committed:
            type: integer
            example: 168
          rolledback:
            type: integer
            example: 68
          invalid:
            type: integer
            example: 24
      rollbacks:
        type: integer
        example: 13
  ValidatorStats:
    allOf:
      - $ref: "#/definitions/Timestamp"
      - $ref: "#/definitions/BaseValidatorStats"
      - properties:
          "{transaction_processor}":
            $ref: "#/definitions/BaseValidatorStats"
  BaseGossipStats:
    properties:
      packets:
        properties:
          received:
            type: integer
            example: 54321
          sent:
            type: integer
            example: 76543
          dropped:
            type: integer
            example: 123
          duplicate:
            type: integer
            example: 89
      bytes:
        properties:
          received:
            type: integer
            example: 108642
          sent:
            type: integer
            example: 153086
          dropped:
            type: integer
            example: 246
      messages_handled:
        type: integer
        example: 432
  GossipStats:
    allOf:
      - $ref: "#/definitions/Timestamp"
      - $ref: "#/definitions/BaseGossipStats"
      - properties:
          peer_count:
            type: integer
            example: 7
          "{peer_id}":
            $ref: "#/definitions/BaseGossipStats"

  ConfigStatus:
    properties:
      max_transactions_per_block:
        type: integer
        example: 1000
      min_transactions_per_block:
        type: integer
        example: 1
  SystemStatus:
    properties:
      local_time:
        type: string
        format: date-time
        example: 2017-01-29T18:50:07Z
      percent_cpu:
        type: number
        format: float
        example: 0.2345
      percent_memory:
        type: number
        format: float
        example: 0.4657
      network_rx:
        type: integer
        example: 46578
      network_tx:
        type: integer
        example: 54238
