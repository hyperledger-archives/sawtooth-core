#!/bin/bash
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Exit on non-zero exit code from subcommand
set -e

# Default args
LANGUAGES=""
EXCLUDE=""

MOUNTED="mounted"
INSTALLED="installed"
DEBS="debs"

usage() {
    echo "Usage:"
    echo "  $0 [-l Language] [-x Language] {$MOUNTED,$INSTALLED,$DEBS}"
    echo
    echo "Options:"
    echo "  -h            print usage and exit"
    echo "  -l Language   only build the specified language(s)"
    echo "  -x Language   exclude the specified language(s)"
}

info() {
    echo -e "\033[0;36m\n[--- $1 ---]\n\033[0m"
}

warn() {
    echo -e "\033[0;31m\n[--- $1 ---]\n\033[0m"
}

while getopts :x:l:h opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        l)
            LANGUAGES="$LANGUAGES $OPTARG"
            ;;
        x)
            EXCLUDE="$EXCLUDE $OPTARG"
            ;;

        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND-1))

if [[ -z $1 ]]
then
    BUILD_MODE=$MOUNTED
else
    if [[ $1 == $MOUNTED || $1 == $INSTALLED || $1 == $DEBS ]]
    then
        BUILD_MODE=$1
    else
        echo "Invalid positional argument: $1"
        usage
        exit 1
    fi
fi

# If no '-m' flags are passed, run these modules
if [[ $LANGUAGES = "" ]]
then
    LANGUAGES="
        go
        java
        javascript
        python
"
fi

main() {

    info "Build mode: $BUILD_MODE"

    # Set sawtooth-core project directory relative to this file
    top_dir=$(cd $(dirname $(dirname $0)) && pwd)

    # Start in project directory
    cd $top_dir

    build_external

    if [[ $BUILD_MODE == $DEBS ]]
    then
        build_debs
    fi

    for language in $LANGUAGES
    do

        # Check if we are skipping this module
        skip=0
        for exclude in $EXCLUDE
        do
            if [[ $language == $exclude ]]
            then
                skip=1
                break
            fi
        done

        if [[ $skip == 1 ]]
        then
            info "Skipping $language"
        else
            info "Building $language"
            case $language in
                go)
                    build_go
                    ;;
                java)
                    build_java
                    ;;
                javascript)
                    build_javascript
                    ;;
                python)
                    build_python
                    ;;

                *)
                    echo "Module '$language' not found."
                    ;;
            esac
        fi
    done
}

docker_run() {
    image=$1

    if [ -z $ISOLATION_ID ]; then
        tag=$image
    else
        tag=$image:$ISOLATION_ID
    fi

    info "Running $image"
    if [ -z $BUILD_TAG ]
    then
        docker run -t --rm -v $top_dir:/project/sawtooth-core \
            --env https_proxy=$https_proxy \
            --env http_proxy=$http_proxy \
            --env HTTPS_PROXY=$HTTPS_PROXY \
            --env HTTP_PROXY=$HTTP_PROXY \
            $tag
    else
        docker run --rm -v $top_dir:/project/sawtooth-core \
            --env https_proxy=$https_proxy \
            --env http_proxy=$http_proxy \
            --env HTTPS_PROXY=$HTTPS_PROXY \
            --env HTTP_PROXY=$HTTP_PROXY \
            $tag
    fi
}

docker_build() {
    image=$1
    context=$2
    tag=$3

    if [ ! -z $ISOLATION_ID ]
    then
        tag=$tag:$ISOLATION_ID
    fi

    info "Building $tag from $image"

    # Build the image and pass in any proxy information if set
    docker build -f $image -t $tag $context \
        --build-arg https_proxy=$https_proxy \
        --build-arg http_proxy=$http_proxy \
        --build-arg HTTPS_PROXY=$HTTPS_PROXY \
        --build-arg HTTP_PROXY=$HTTP_PROXY
}

build_external() {
    docker_build docker/apache-basic_auth_proxy docker/ apache-basic_auth_proxy
}

build_debs() {
    build_dir=/tmp/build-docker$ISOLATION_ID
    rm -rf $build_dir
    mkdir -p $build_dir

    cp $top_dir/bin/install_packaging_deps $build_dir
    cp $top_dir/ci/sawtooth-build-debs $build_dir
    docker_build $build_dir/sawtooth-build-debs $build_dir sawtooth-build-debs
    docker_run sawtooth-build-debs
    exit 0
}

if [[ $BUILD_MODE == $MOUNTED ]]
then
    build_go() {
        docker_build docker/sawtooth-dev-go docker/ sawtooth-dev-go
        docker_build docker/sawtooth-dev-go docker/ sawtooth-tp_intkey_go
        docker_build docker/sawtooth-dev-go docker/ sawtooth-tp_burrow_evm
        docker_build docker/sawtooth-dev-go docker/ sawtooth-tp_xo_go
        docker_run sawtooth-dev-go
    }

    build_java() {
        docker_build docker/sawtooth-dev-java docker/ sawtooth-dev-java
        docker_build docker/sawtooth-dev-java docker/ sawtooth-tp_intkey_java
        docker_build docker/sawtooth-dev-java docker/ sawtooth-tp_xo_java
        docker_run sawtooth-dev-java
    }

    build_javascript() {
        docker_build docker/sawtooth-dev-javascript docker/ sawtooth-dev-javascript
        docker_build docker/sawtooth-dev-javascript docker/ sawtooth-tp_intkey_javascript
        docker_build docker/sawtooth-dev-javascript docker/ sawtooth-tp_xo_javascript
        docker_run sawtooth-dev-javascript
    }

    build_python() {
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-dev-python
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-rest_api
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-tp_settings
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-tp_intkey_python
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-tp_supplychain_python
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-tp_validator_registry
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-tp_xo_python
        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-validator
        docker_run sawtooth-dev-python
    }
fi

if [[ $BUILD_MODE == $INSTALLED ]]
then
    build_go() {
        docker_build docker/sawtooth-dev-go docker/ sawtooth-dev-go
        docker_run sawtooth-dev-go

        build_dir=/tmp/build-docker$ISOLATION_ID
        rm -rf $build_dir
        mkdir -p $build_dir
        cp $top_dir/docker/sawtooth-int-tp_intkey_go $build_dir
        cp $top_dir/docker/sawtooth-int-tp_xo_go $build_dir
        cp $top_dir/sdk/examples/intkey_go/bin/tp_intkey_go \
            $build_dir
        cp $top_dir/docker/sawtooth-int-tp_burrow_evm $build_dir
        cp $top_dir/families/burrow_evm/bin/tp_burrow_evm \
            $build_dir
        cp $top_dir/sdk/examples/xo_go/bin/tp_xo_go \
            $build_dir
        ls $build_dir

        docker_build $build_dir/sawtooth-int-tp_intkey_go $build_dir/ \
            sawtooth-tp_intkey_go
        docker_build $build_dir/sawtooth-int-tp_burrow_evm $build_dir/ \
            sawtooth-tp_burrow_evm
        docker_build $build_dir/sawtooth-int-tp_xo_go $build_dir/ \
            sawtooth-tp_xo_go
    }

    build_java() {
        warn "Installed java images not implemented, building mounted instead"
        docker_build docker/sawtooth-dev-java docker/ sawtooth-dev-java
        docker_build docker/sawtooth-dev-java docker/ sawtooth-tp_intkey_java
        docker_build docker/sawtooth-dev-java docker/ sawtooth-tp_xo_java
        docker_run sawtooth-dev-java
    }

    build_javascript() {
        warn "Installed javascript images not implemented, building mounted instead"
        docker_build docker/sawtooth-dev-javascript docker/ sawtooth-dev-javascript
        docker_build docker/sawtooth-dev-javascript docker/ sawtooth-tp_intkey_javascript
        docker_build docker/sawtooth-dev-javascript docker/ sawtooth-tp_xo_javascript
        docker_run sawtooth-dev-javascript
    }

    build_python() {
        build_dir=/tmp/build-docker$ISOLATION_ID
        rm -rf $build_dir
        mkdir -p $build_dir

        cp $top_dir/bin/install_packaging_deps $build_dir
        cp $top_dir/ci/sawtooth-build-debs $build_dir
        docker_build $build_dir/sawtooth-build-debs $build_dir sawtooth-build-debs
        docker_run sawtooth-build-debs

        docker_build $top_dir/docker/sawtooth-dev-python docker/ sawtooth-dev-python
        docker_run sawtooth-dev-python

        cp $top_dir/build/debs/*.deb $build_dir/
        cp $top_dir/docker/sawtooth-int-* $build_dir/
        ls $build_dir

        docker_build $build_dir/sawtooth-int-rest_api \
            $build_dir/ sawtooth-rest_api

        docker_build $build_dir/sawtooth-int-tp_settings \
            $build_dir/ sawtooth-tp_settings

        docker_build $build_dir/sawtooth-int-tp_intkey_python \
            $build_dir/ sawtooth-tp_intkey_python

        docker_build $build_dir/sawtooth-int-tp_validator_registry \
            $build_dir/ sawtooth-tp_validator_registry

        docker_build $build_dir/sawtooth-int-tp_xo_python \
            $build_dir/ sawtooth-tp_xo_python

        docker_build $build_dir/sawtooth-int-validator \
            $build_dir/ sawtooth-validator
    }

fi

main
