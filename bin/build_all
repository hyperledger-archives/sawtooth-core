#!/bin/bash
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Exit on non-zero exit code from subcommand
set -e

# Default args
LANGUAGES=""
EXCLUDE=""

MOUNTED="mounted"
INSTALLED="installed"

usage() {
    echo "Usage:"
    echo "  $0 [-l Language] [-x Language] {$MOUNTED,$INSTALLED}"
    echo
    echo "Options:"
    echo "  -h            print usage and exit"
    echo "  -l Language   only build the specified language(s)"
    echo "  -x Language   exclude the specified language(s)"
}

info() {
    echo -e "\033[0;36m\n[--- $1 ---]\n\033[0m"
}

warn() {
    echo -e "\033[0;31m\n[--- $1 ---]\n\033[0m"
}

while getopts :x:l:h opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        l)
            LANGUAGES="$LANGUAGES $OPTARG"
            ;;
        x)
            EXCLUDE="$EXCLUDE $OPTARG"
            ;;

        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND-1))

if [[ -z $1 ]]
then
    BUILD_MODE=$MOUNTED
else
    if [[ $1 == $MOUNTED || $1 == $INSTALLED ]]
    then
        BUILD_MODE=$1
    else
        echo "Invalid positional argument: $1"
        usage
        exit 1
    fi
fi

# If no '-m' flags are passed, run these modules
if [[ $LANGUAGES = "" ]]
then
    LANGUAGES="
        java
        javascript
        python
"
fi

main() {

    info "Building images with sawtooth $BUILD_MODE"

    setup

    for language in $LANGUAGES
    do

        # Check if we are skipping this module
        skip=0
        for exclude in $EXCLUDE
        do
            if [[ $language == $exclude ]]
            then
                skip=1
                break
            fi
        done

        if [[ $skip == 1 ]]
        then
            info "Skipping $language"
        else
            info "Building $language"
            case $language in
                java)
                    build_java
                    ;;
                javascript)
                    build_javascript
                    ;;
                python)
                    build_python
                    ;;

                *)
                    echo "Module '$language' not found."
                    ;;
            esac
        fi
    done
}

docker_run() {
    image=$1

    if [ -z $ISOLATION_ID ] || [ $image = "sawtooth-dev-base" ]; then
        tag=$image
    else
        tag=$image:$ISOLATION_ID
    fi

    if [ -z $BUILD_TAG ]
    then
        docker run -t --rm -v $top_dir:/project/sawtooth-core $tag
    else
        docker run --rm -v $top_dir:/project/sawtooth-core $tag
    fi
        
}

docker_build() {
    image=$1

    if [ -z $ISOLATION_ID ] || [ $image = "sawtooth-dev-base" ]
    then
        tag=$image
    else
        tag=$image:$ISOLATION_ID
    fi

    info "Building $image..."

    # Build the image and pass in any proxy information if set
    docker build -f $build_dir/$image -t $tag $build_dir \
        --build-arg https_proxy=$https_proxy \
        --build-arg http_proxy=$http_proxy \
        --build-arg HTTPS_PROXY=$HTTPS_PROXY \
        --build-arg HTTP_PROXY=$HTTP_PROXY
}

if [[ $BUILD_MODE == $MOUNTED ]]
then
    setup() {
        # Set sawtooth-core project directory relative to this file
        top_dir=$(cd $(dirname $(dirname $0)) && pwd)
        build_dir=$(cd $(dirname $(dirname $0))/docker && pwd)

        # Start in project directory
        cd $top_dir
    }

    build_java() {
        docker_build sawtooth-build-java
        docker_run sawtooth-build-java
        docker_build sawtooth-dev-tp_intkey_java
    }

    build_javascript() {
        docker_build sawtooth-build-javascript
        docker_run sawtooth-build-javascript
        docker_build sawtooth-dev-tp_intkey_javascript
    }

    build_python() {
        docker_build sawtooth-dev-base
        docker_build sawtooth-build-python
        docker_run sawtooth-build-python
        docker_build sawtooth-dev-tp_intkey_python
        docker_build sawtooth-dev-rest_api
        docker_build sawtooth-dev-test
        docker_build sawtooth-dev-tp_config
        docker_build sawtooth-dev-tp_validator_registry
        docker_build sawtooth-dev-tp_xo_python
        docker_build sawtooth-dev-validator
    }
fi

if [[ $BUILD_MODE == $INSTALLED ]]
then
    setup() {
        top_dir=$(cd $(dirname $(dirname $0)) && pwd)
        docker_dir=$top_dir/docker
        ci_dir=$top_dir/ci
        bin_dir=$top_dir/bin
        pkg_dir=$top_dir/build/debs

        build_dir=/tmp/build-sawtooth-docker
        rm -rf $build_dir
        mkdir -p $build_dir

        info "Copying Dockerfiles to build dir"
        rsync -aH $docker_dir/ $build_dir/
        rsync -aH $ci_dir/ $build_dir/
        rsync -aH $bin_dir/ $build_dir/bin

        info "Copying debs to build dir"
        rsync -aH $pkg_dir/ $build_dir/

        # Build the debs
        docker_build sawtooth-build-debs
        docker_run   sawtooth-build-debs
    }

    build_java() {
        warn "Skipping java images... not implemented"
    }

    build_javascript() {
        warn "Skipping javascript images... not implemented"
    }

    build_python() {
        docker_build sawtooth-rest_api
        docker_build sawtooth-tp_config
        docker_build sawtooth-tp_intkey_python
        docker_build sawtooth-tp_validator_registry
        docker_build sawtooth-tp_xo_python
        docker_build sawtooth-validator
    }

fi

main
