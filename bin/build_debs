#!/bin/bash
#
# Copyright 2016, 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

set -e

main() {
    top_dir=$(cd $(dirname $(dirname $0)) && pwd)

    # 1. Clean up any previous builds and create directories
    pkg_dir=$top_dir/build/debs
    mkdir -p $pkg_dir
    rm -f $pkg_dir/*.deb

    build_dir=/tmp/build-debs
    rm -rf $build_dir
    mkdir -p $build_dir

    # 2. Copy to tmp
    info "Copying source to temp build dir"

    rsync -aH \
        --exclude="build" \
        --exclude="target" \
        --exclude="node-modules" \
        --exclude="*.pyc" \
        --exclude="*.swp" \
        --exclude="*_pb2.py" \
        --exclude="__pycache__" \
        $top_dir/ \
        $build_dir/

    # 3. Run protogen
    info "Building protobuf classes"
    $build_dir/bin/protogen

    # 4. Build the packages in the correct order

    # Group 1: No internal dependencies
    build_pkg "signing"

    pypath=$build_dir/consensus/poet/common
    pypath=$pypath:$build_dir/consensus/poet/common/tests
    build_pkg "consensus/poet/common"  $pypath

    build_pkg "utility/ias_client"

    # Group 2: Depends only on 1
    build_pkg "sdk/python" "$build_dir/sdk/python"

    build_pkg "cli"

    # Group 3: Depends on 1 & 2
    build_pkg "families/settings"

    build_pkg "families/identity"

    build_pkg "rest_api"

    build_pkg "sdk/examples/intkey_python"

    build_pkg "sdk/examples/xo_python"

    build_pkg "validator" "$build_dir/signing"

    pypath=$build_dir/integration
    pypath=$pypath:$build_dir/sdk/python
    pypath=$pypath:$build_dir/signing
    pypath=$pypath:$build_dir/consensus/poet/common
    pypath=$pypath:$build_dir/consensus/poet/families
    pypath=$pypath:$build_dir/consensus/poet/families/tests
    build_pkg "consensus/poet/families" $pypath

    # Group 4: Depends on 1, 2, & 3
    pypath=$build_dir/signing
    pypath=$pypath:$build_dir/validator
    pypath=$pypath:$build_dir/consensus/poet/common
    pypath=$pypath:$build_dir/consensus/poet/core
    pypath=$pypath:$build_dir/consensus/poet/families
    pypath=$pypath:$build_dir/consensus/poet/families/tests
    build_pkg "consensus/poet/simulator" $pypath

    pypath=$build_dir/signing
    pypath=$pypath:$build_dir/validator
    pypath=$pypath:$build_dir/consensus/poet/common
    pypath=$pypath:$build_dir/consensus/poet/common/tests
    pypath=$pypath:$build_dir/consensus/poet/core
    pypath=$pypath:$build_dir/consensus/poet/core/tests
    pypath=$pypath:$build_dir/consensus/poet/simulator
    build_pkg "consensus/poet/core" $pypath

    pypath=$build_dir/sdk/python
    pypath=$pypath:$build_dir/utility/ias_client
    build_pkg "utility/ias_proxy" $pypath

    # Group 5: Depends on 1-4
    build_pkg "consensus/poet/cli" $pypath

    # Group 6: PoET
    # No dependencies on anything above, builds last for simplicity
    if [ -z ${POET_ENCLAVE_PEM+x} ];
    then
        export POET_ENCLAVE_PEM=/tmp/sgxsdk/SampleCode/SampleEnclave/Enclave/Enclave_private.pem
    fi

    export SGXSDKInstallPath=/tmp/sgxsdk/

    SAWTOOTH_CORE=/project/sawtooth-core
    SAWTOOTH_POET=/project/sawtooth-core/consensus/poet/sgx

    PATH=$PATH:$SAWTOOTH_CORE/bin
    export PATH
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SAWTOOTH_POET

    build_pkg "consensus/poet/sgx"

    # 5. Build the meta-package
    VERSION=$($top_dir/bin/get_version)
    cd $top_dir/ci
    sed -i -e"s/@VERSION@/$VERSION/" ns-control
    equivs-build ns-control
    sed -i -e"s/$VERSION/@VERSION@/" ns-control
    mv sawtooth*.deb $pkg_dir/

    # 6. Copy the packages to the output directory
    find $build_dir -name python3-sawtooth*.deb -exec cp {} $pkg_dir/ \;

    # 7. Display info for all packages built
    cd $top_dir
    for pkg in build/debs/*.deb
    do
        echo
        info "Package $pkg"
        dpkg -I $pkg
    done
}

info() {
    echo -e "\033[0;35m\n[--- $1 ---]\n\033[0m"
}

build_pkg() {
    pkg=$1
    pypath=$2

    info "Building $pkg"

    # 1. Set PYTHONPATH required for unit tests
    export PYTHONPATH=$pypath

    cd $build_dir/$pkg

    # 2. Cleanup previous builds
    if [ -d "debian" ]
    then
        rm -rf debian
    fi
    python3 setup.py clean --all


    # 2. Build the package
    python3 setup.py --command-packages=stdeb.command debianize

    if [ -d "packaging/ubuntu" ]
    then
        cp -R packaging/ubuntu/* debian/
    fi

    dpkg-buildpackage -b -rfakeroot -us -uc

    # 3. Install the package
    mv ../*.deb ./
    dpkg -i *.deb

    unset PYTHONPATH
}

main
