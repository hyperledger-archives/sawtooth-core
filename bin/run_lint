#!/bin/bash
#
# Copyright 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

find_packages() {
    topdir=$1
    since=$2
    exclude_dir=$3

    (
    if [ "$since" != "" ]; then
        git ls-files -mo "$topdir/*.py" -x build
        git diff --name-only $since "$topdir/*.py"
    else
        if [ "$exclude_dir" != "" ]; then
            find $topdir -name \*.py -not -path "*/$exclude_dir/*"
        else
            find $topdir -name \*.py
        fi
    fi
    ) \
        | sort \
        | uniq \
        | git check-ignore --stdin --non-matching --verbose \
        | grep ^:: \
        | sed -e 's/^::\s//' \
        | grep -v /setup.py$ \
        | grep -v /integration/ \
        | grep -v /unit/ \
        | grep -v /unit3/ \
        | grep -v /sawtooth_suites/ \
        | grep -v /navigator/ \
        | grep -v _pb2\.py$
}

lint() {
    topdir=$(pwd)
    pylint_bin=$1
    subdir=$2
    since=$3
    pylintrc=$4
    run_pep8=$5
    exclude_dir=$6


    error=0

    packages=$(find_packages "$subdir" "$since" "$exclude_dir")

    if [ "$packages" != "" ]; then
        if [ "$run_pep8" = "1" ]; then
            [ $VERBOSE = 1 ] && (
                echo "------------------------------------------------------------------------------"
                echo "-- Running pep8 in $subdir..."
            )
            pep8 --config=$topdir/.pep8 $packages || error=1
        fi

        [ $VERBOSE = 1 ] && (
            echo "------------------------------------------------------------------------------"
            echo "-- Running $pylint_bin $pylintrc in $subdir..."
        )
        $pylint_bin \
            --rcfile=$pylintrc \
            --reports=no \
            --persistent=no \
            $packages || error=1


        [ $VERBOSE = 1 ] && (
            echo "------------------------------------------------------------------------------"
            echo "-- Checking for CRLF in $subdir..."
        )
        file $packages | grep CRLF && error=1
    else
        [ $VERBOSE = 1 ] && (
            echo "------------------------------------------------------------------------------"
            echo "-- Skipping pep8 and pylint $pylintrc in $subdir. (Nothing to do.)"
        )
    fi

    return $error
}

usage() {
    echo "Usage:"
    echo "  $0 [-s BRANCH] [-n] [-h]"
    echo
    echo "Options:"
    echo "  -h          print usage and exit"
    echo "  -n          dry-run, only prints files that would be linted"
    echo "  -s BRANCH   only lint files changed since BRANCH"
    echo "  -v          increase verbosity"
}


DRY_RUN=0
VERBOSE=0
SINCE=""
while getopts :s:nhv opt
do
    case $opt in
      h)
        usage
        exit 0
        ;;
      n)
        DRY_RUN=1
        ;;
      s)
        SINCE=$OPTARG
        ;;
      v)
        if [ "$VERBOSE" = "1" ]; then
            set -x
        fi
        VERBOSE=1
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 2
        ;;
    esac
done

if [ "$DRY_RUN" = "1" ]; then
    for dir in core signing validator sdk/python sdk/examples/intkey_python \
        extensions/arcade
    do
        for package in $(find_packages "$dir" "$SINCE")
        do
            echo $package
        done
    done
    exit 0
fi


top_dir=$(cd $(dirname $(dirname $0)) && pwd)
retval=0

PYTHONPATH=$top_dir/signing
export PYTHONPATH
lint "python3 -m pylint" signing "$SINCE" .pylintrc-strict 1 || retval=1

PYTHONPATH=$top_dir/sdk/python
PYTHONPATH=$PYTHONPATH:$top_dir/sdk/examples/intkey_python
PYTHONPATH=$PYTHONPATH:$top_dir/signing
export PYTHONPATH
lint "python3 -m pylint" sdk/python "$SINCE" .pylintrc-strict 1 || retval=1
lint "python3 -m pylint" sdk/examples/intkey_python "$SINCE" .pylintrc-strict 1 || retval=1
lint "python3 -m pylint" sdk/examples/sawtooth_xo "$SINCE" .pylintrc-strict 1 || retval=1
lint "python3 -m pylint" rest_api/sawtooth_rest_api "$SINCE" .pylintrc-strict 1 || retval=1

PYTHONPATH=$top_dir/core_transactions/config
PYTHONPATH=$top_dir/sdk/python
export PYTHONPATH
lint "python3 -m pylint" core_transactions/config "$SINCE" .pylintrc-strict 1 || retval=1

PYTHONPATH=$top_dir/signing
PYTHONPATH=$PYTHONPATH:$top_dir/validator
lint "python3 -m pylint" validator/sawtooth_validator "$SINCE" .pylintrc-strict 1 consensus || retval=1

PYTHONPATH=$top_dir/cli
PYTHONPATH=$PYTHONPATH:$top_dir/signing
export PYTHONPATH
lint "python3 -m pylint" cli  "$SINCE" .pylintrc-strict 1 || retval=1

exit $retval
