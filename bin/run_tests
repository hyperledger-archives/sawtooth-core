#!/bin/bash
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

MODULES="cli, core, rest_api, sdk, signing, validator"
usage() {
    echo "Usage:"
    echo "  $0 [-m Module]"
    echo
    echo "Options:"
    echo "  -h          print usage and exit"
    echo "  -m Module   only run tests of specified module {$MODULES}"
    echo "  -m Prefix   "
}

# Exit on non-zero exit code from subcommand
set -e
# Set sawtooth-core project directory relative to this file
PROJECT_DIR=$(cd $(dirname $(dirname $0)) && pwd)

# Make sawtooth scripts accessible
export PATH=$PROJECT_DIR/bin:$PATH

# Default args
MODULE="all"
export ISOLATION_ID="latest"

while getopts np:m:h opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        m)
            MODULE=$OPTARG
            ;;
        p)
            ISOLATION_ID=$OPTARG
            ;;
        n)
            NOBUILD=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 2
            ;;
    esac
done

main() {
    if [ -z $NOBUILD ]
    then
      docker_build_all
    fi

    # Start in project directory
    cd $PROJECT_DIR

    case $MODULE in
        all)
            test_cli
            test_core
            test_rest_api
            test_sdk
            test_signing
            test_validator
            test_poet
            ;;
        cli)
            test_cli
            ;;
        core)
            test_core
            ;;
        rest_api)
            test_rest_api
            ;;
        sdk)
            test_sdk
            ;;
        signing)
            test_signing
            ;;
        validator)
            test_validator
            ;;
        poet)
            test_poet
            ;;

        *)
            echo "Module '$MODULE' not found."
            ;;
    esac
}

test_cli() {
    echo "[---Running cli tests---]"
    run_docker_test ./cli/tests/unit_cli.yaml -s cli -p $ISOLATION_ID
}

test_core() {
    echo "[---Running core tests---]"
}

test_rest_api() {
    echo "[---Running REST API tests---]"
    run_docker_test ./rest_api/tests/unit_rest_api.yaml -s unit-tests -p $ISOLATION_ID
}

test_sdk() {
    echo "[---Running SDK tests---]"
    # config
    run_docker_test \
      core_transactions/config/tests/sawtooth_config_test/tp-config.yaml \
      -s validator -p $ISOLATION_ID

    # intkey
    run_docker_test tp-intkey-python -s validator -p $ISOLATION_ID
    run_docker_test tp-intkey-java -s validator -p $ISOLATION_ID
    run_docker_test tp-intkey-javascript -s validator -p $ISOLATION_ID
    run_docker_test intkey-smoke -s integration_test -p $ISOLATION_ID

    # xo
    run_docker_test tp-xo-python -s validator -p $ISOLATION_ID
    run_docker_test xo-smoke -s integration_test -p $ISOLATION_ID
}

test_signing() {
    echo "[---Running signing tests---]"
    run_docker_test ./signing/tests/unit_signing.yaml -s signing -p $ISOLATION_ID
}

test_validator() {
    echo "[---Running validator tests---]"
    run_docker_test ./validator/tests/unit_validator.yaml -s validator -p $ISOLATION_ID
}

test_poet(){
    echo "[---Running poet---]"
    run_docker_test ./poet/sawtooth_poet/tests/validator_registry_test/tp_validator_registry.yaml \
    -s validator -p $ISOLATION_ID
}

main
