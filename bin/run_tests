#!/bin/bash
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

MODULE_LIST="
    signing
    cli
    rest_api
    poet_cli
    poet_common
    poet_core
    poet_simulator
    validator
    java_sdk
    javascript_sdk
    python_sdk
    integration
    config
"

usage() {
    echo "Usage:"
    echo "  $0 [-m Module] [-s Module]"
    echo "  (-m and -s can be passed multiple times)"
    echo ""
    echo "Options:"
    echo "  -h          print usage and exit"
    echo "  -m Module   only run tests of specified module"
    echo "  -x Module   exclude the tests of specified module"
    echo ""
    echo "Current modules: $MODULE_LIST"
}

# Exit on non-zero exit code from subcommand
set -e
# Set sawtooth-core project directory relative to this file
PROJECT_DIR=$(cd $(dirname $(dirname $0)) && pwd)

# Make sawtooth scripts accessible
PATH=$PROJECT_DIR/bin:$PATH

# Default args
MODULES=""
EXCLUDE=""

while getopts x:m:h opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        m)
            MODULES="$MODULES $OPTARG"
            ;;
        x)
            EXCLUDE="$EXCLUDE $OPTARG"
            ;;

        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 2
            ;;
    esac
done

# If no '-m' flags are passed, run these modules
if [[ $MODULES = "" ]]
then
    MODULES=$MODULE_LIST
fi

main() {

# Start in project directory
    cd $PROJECT_DIR

    for module in $MODULES
    do

# Check if we are skipping this module
        skip=0
        for exclude in $EXCLUDE
        do
            if [[ $module == $exclude ]]
            then
                skip=1
                break
            fi
        done

        if [[ $skip == 1 ]]
        then
            echo "[---Skipping $module tests---]"
        else
            echo "[---Running $module tests---]"
            case $module in
                signing)
                    test_signing
                    ;;
                cli)
                    test_cli
                    ;;
                rest_api)
                    test_rest_api
                    ;;
                poet)
                    test_poet_cli
                    test_poet_common
                    test_poet_core
                    test_poet_simulator
                    ;;
                poet_cli)
                    test_poet_cli
                    ;;
                poet_common)
                    test_poet_common
                    ;;
                poet_core)
                    test_poet_core
                    ;;
                poet_simulator)
                    test_poet_simulator
                    ;;
                validator)
                    test_validator
                    ;;
                java_sdk)
                    test_java_sdk
                    ;;
                javascript_sdk)
                    test_javascript_sdk
                    ;;
                python_sdk)
                    test_python_sdk
                    ;;
                integration)
                    test_integration
                    ;;
                config)
                    test_config
                    ;;

                *)
                    echo "Module '$MODULE' not found."
                    ;;
            esac
        fi
    done
}

test_signing() {
    run_docker_test ./signing/tests/unit_signing.yaml -s signing
}

test_cli() {
    run_docker_test ./cli/tests/unit_cli.yaml -s cli
}

test_rest_api() {
    run_docker_test ./rest_api/tests/unit_rest_api.yaml -s unit-tests
}

test_poet_cli(){
    run_docker_test ./consensus/poet/cli/tests/unit_cli.yaml \
    -s poet
}

test_poet_common(){
    run_docker_test ./consensus/poet/common/tests/unit_common.yaml -s poet
}

test_poet_core(){
    run_docker_test ./consensus/poet/core/tests/unit_core.yaml -s poet
}

test_poet_simulator(){
    run_docker_test ./consensus/poet/simulator/tests/unit_simulator.yaml -s poet
}

test_validator() {
    run_docker_test ./validator/tests/unit_validator.yaml -s validator
    run_docker_test shutdown-smoke.yaml -s integration_test
}

test_java_sdk() {
    run_docker_test tp-intkey-java -s validator
    run_docker_test intkey-java-smoke -s integration_test
}

test_javascript_sdk() {
    run_docker_test tp-intkey-javascript -s validator
    run_docker_test intkey-javascript-smoke -s integration_test
}

test_python_sdk() {
    run_docker_test tp-config -s validator
    run_docker_test tp-validator-registry -s validator
    run_docker_test tp-intkey-python -s validator
    run_docker_test tp-xo-python -s validator

    run_docker_test intkey-python-smoke -s integration_test
    run_docker_test xo-smoke -s integration_test
    run_docker_test two_families -s integration_test
}

test_integration() {
    run_docker_test poet-smoke -s integration_test
}

test_config() {
    run_docker_test tp-config -s validator
    run_docker_test config-smoke -s integration_test
}

main
