#!/bin/bash
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# MODULE_LIST determines the order in which modules are run.
# Quicker tests should run before slower ones.
MODULE_LIST="
    signing
    cli
    rest_api
    poet
    settings
    identity
    block_info
    validator
    go_sdk
    java_sdk
    javascript_sdk
    python_sdk
    track_and_trade
    rust_sdk
    seth
    integration
"

usage() {
    echo "Usage:"
    echo "  $0 [-m Module] [-x Module] [-i Module]"
    echo "  (-m, -x and -i can be passed multiple times)"
    echo ""
    echo "Options:"
    echo "  -h          print usage and exit"
    echo "  -m Module   only run tests of specified module"
    echo "  -x Module   exclude the tests of specified module"
    echo "  -i Module   include the tests of specified module"
    echo ""
    echo "Current modules: $MODULE_LIST"
}

# Exit on non-zero exit code from subcommand
set -e
# Set sawtooth-core project directory relative to this file
PROJECT_DIR=$(cd $(dirname $(dirname $0)) && pwd)

# Make sawtooth scripts accessible
PATH=$PROJECT_DIR/bin:$PATH

if [ ! -d "$PROJECT_DIR/coverage" ]; then
  mkdir $PROJECT_DIR/coverage
fi

# Default args
MODULES=""
EXCLUDE=""
INCLUDE=""

while getopts i:x:m:h opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        m)
            MODULES="$MODULES $OPTARG"
            ;;
        x)
            EXCLUDE="$EXCLUDE $OPTARG"
            ;;
        i)
            INCLUDE="$INCLUDE $OPTARG"
            ;;

        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 2
            ;;
    esac
done

# If no '-m' flags are passed, run these modules
if [[ $MODULES = "" ]]
then
    MODULES=$MODULE_LIST
fi

MODULES="$INCLUDE $MODULES"

main() {

# Start in project directory
    cd $PROJECT_DIR

    for module in $MODULES
    do

# Check if we are skipping this module
        skip=0
        for exclude in $EXCLUDE
        do
            if [[ $module == $exclude ]]
            then
                skip=1
                break
            fi
        done

        if [[ $skip == 1 ]]
        then
            echo "[---Skipping $module tests---]"
        else
            echo "[---Running $module tests---]"
            case $module in
                signing)
                    test_signing
                    ;;
                cli)
                    test_cli
                    ;;
                rest_api)
                    test_rest_api
                    ;;
                poet)
                    test_poet_cli
                    test_poet_common
                    test_poet_core
                    test_poet_simulator
                    test_poet_families
                    test_ias
                    ;;
                poet_cli)
                    test_poet_cli
                    ;;
                poet_common)
                    test_poet_common
                    ;;
                poet_core)
                    test_poet_core
                    ;;
                poet_simulator)
                    test_poet_simulator
                    ;;
                poet_families)
                    test_poet_families
                    ;;
                ias)
                    test_ias
                    ;;
                settings)
                    test_settings
                    ;;
                identity)
                    test_identity
                    ;;
                block_info)
                    test_block_info
                    ;;
                supplychain)
                    test_supplychain
                    ;;
		track_and_trade)
		    test_track_and_trade
		    ;;
                validator)
                    test_validator
                    ;;
                go_sdk)
                    test_go_sdk
                    ;;
                java_sdk)
                    test_java_sdk
                    ;;
                javascript_sdk)
                    test_javascript_sdk
                    ;;
                python_sdk)
                    test_python_sdk
                    ;;
                rust_sdk)
                    test_rust_sdk
                    ;;
                integration)
                    test_integration
                    ;;
                deployment)
                    test_deployment
                    ;;
                seth)
                    test_seth
                    ;;
                *)
                    echo "Module '$module' not found."
                    ;;
            esac
        fi
    done
}

test_signing() {
    run_docker_test ./signing/tests/unit_signing.yaml
    copy_coverage .coverage.signing
}

test_cli() {
    run_docker_test ./cli/tests/unit_cli.yaml
    copy_coverage .coverage.cli
}

test_rest_api() {
    run_docker_test ./rest_api/tests/unit_rest_api.yaml
    copy_coverage .coverage.rest_api
}

test_poet_cli() {
    run_docker_test ./consensus/poet/cli/tests/unit_poet_cli.yaml
    copy_coverage .coverage.poet_cli
}

test_poet_common() {
    run_docker_test ./consensus/poet/common/tests/unit_poet_common.yaml
    copy_coverage .coverage.poet_common
}

test_poet_core() {
    run_docker_test ./consensus/poet/core/tests/unit_poet_core.yaml
    copy_coverage .coverage.poet_core
}

test_poet_simulator() {
    run_docker_test ./consensus/poet/simulator/tests/unit_poet_simulator.yaml
    copy_coverage .coverage.poet_simulator
}

test_poet_families() {
    run_docker_test ./consensus/poet/families/tests/test_tp_validator_registry.yaml
    copy_coverage .coverage.poet_families
}

test_ias() {
    run_docker_test ./utility/ias_client/tests/unit_ias_client.yaml
    copy_coverage .coverage.ias
}

test_settings() {
    run_docker_test ./families/settings/tests/test_tp_settings.yaml
    copy_coverage .coverage.config
    run_docker_test test_config_smoke
    copy_coverage .coverage.test_config_smoke
}

test_identity() {
  run_docker_test ./families/identity/tests/test_tp_identity.yaml
  copy_coverage .coverage.identity
}

test_block_info() {
  run_docker_test ./families/block_info/tests/test_tp_block_info.yaml
  copy_coverage .coverage.block_info
  run_docker_test test_block_info_injector
  copy_coverage .coverage.block_info_injector
}

test_supplychain() {
    run_docker_test ./families/supplychain/python/tests/unit_supplychain_python.yaml
    copy_coverage .coverage.config
    run_docker_test ./families/supplychain/python/tests/test_tp_supplychain_python.yaml
    copy_coverage .coverage.config
    run_docker_test ./families/supplychain/python/tests/int_supplychain_python.yaml
    copy_coverage .coverage.config
}

test_track_and_trade() {
    run_docker_test test_track_and_trade
    copy_coverage .coverage.track_and_trade
}

test_validator() {
    run_docker_test ./validator/tests/unit_validator.yaml
    copy_coverage .coverage.validator
    run_docker_test test_shutdown_smoke.yaml
    copy_coverage .coverage.test_shutdown_smoke
    run_docker_test test_events_and_receipts
    copy_coverage .coverage.test_events_and_receipts
}

test_go_sdk() {
    run_docker_test ./sdk/go/tests/unit_go_client.yaml
    run_docker_test ./sdk/examples/intkey_python/tests/test_tp_intkey_go.yaml
    run_docker_test ./sdk/examples/xo_python/tests/test_tp_xo_go.yaml
    copy_coverage .coverage.go_sdk
    run_docker_test test_xo_smoke_go
    copy_coverage .coverage.test_xo_smoke_go
    run_docker_test test_intkey_smoke_go
    copy_coverage .coverage.test_intkey_smoke_go
}

test_java_sdk() {
    run_docker_test ./sdk/examples/intkey_python/tests/test_tp_intkey_java.yaml
    copy_coverage .coverage.java_sdk
    run_docker_test test_intkey_smoke_java
    copy_coverage .coverage.test_intkey_smoke_java
    run_docker_test ./sdk/examples/xo_python/tests/test_tp_xo_java.yaml
    copy_coverage .coverage.test_tp_xo_java
    run_docker_test test_xo_smoke_java
    copy_coverage .coverage.test_xo_java_smoke
}

test_javascript_sdk() {
    run_docker_test ./sdk/examples/intkey_python/tests/test_tp_intkey_javascript.yaml
    copy_coverage .coverage.test_tp_intkey_javascript
    run_docker_test test_intkey_smoke_javascript
    copy_coverage .coverage.test_intkey_smoke_javascript
    run_docker_test ./sdk/examples/xo_python/tests/test_tp_xo_javascript.yaml
    copy_coverage .coverage.test_tp_xo_javascript
    run_docker_test test_xo_smoke_javascript
    copy_coverage .coverage.test_xo_smoke_javascript
}

test_python_sdk() {
    run_docker_test ./sdk/python/tests/unit_python_sdk.yaml
    copy_coverage .coverage.test_python_sdk
    run_docker_test ./sdk/examples/intkey_python/tests/test_tp_intkey_python.yaml
    copy_coverage .coverage.test_tp_intkey_python
    run_docker_test ./sdk/examples/xo_python/tests/test_tp_xo_python.yaml
    copy_coverage .coverage.test_tp_xo_python
    run_docker_test test_intkey_smoke_python
    copy_coverage .coverage.test_intkey_smoke_python
    run_docker_test test_workload
    copy_coverage .coverage.workload
    run_docker_test test_xo_smoke_python
    copy_coverage .coverage.test_xo_smoke_python
    run_docker_test test_two_families
    copy_coverage .coverage.two_families
}

test_rust_sdk() {
    run_docker_test ./sdk/rust/unit_rust_sdk.yaml
    run_docker_test ./perf/sawtooth_workload/unit_perf_workload.yaml
}

test_seth() {
  run_docker_test ./families/seth/tests/unit_seth.yaml
  run_docker_test seth_chaining_test
  run_docker_test seth_intkey_test
  run_docker_test seth_blockhash_test
  run_docker_test seth_blocknum_test
  run_docker_test seth_timestamp_test
  run_docker_test seth_perm_test
  run_docker_test ./families/seth/rpc/comp_seth_rpc.yaml
}

test_integration() {
    run_docker_test test_xo_smoke_all
    copy_coverage .coverage.test_xo_smoke_all
    run_docker_test test_poet_smoke
    copy_coverage .coverage.test_poet_smoke
    run_docker_test test_dynamic_network --timeout 600
    copy_coverage .coverage.test_dynamic_network
    run_docker_test test_basic_auth_proxy
    copy_coverage .coverage.test_basic_auth_proxy
    run_docker_test test_transactor_permissioning
    copy_coverage .coverage.test_transactor_permissioning
    run_docker_test test_network_permissioning --timeout 800
    copy_coverage .coverage.test_network_permissioning
}

test_deployment() {
    run_docker_test test_systemd_services
}

copy_coverage() {
    mv -f .coverage $PROJECT_DIR/coverage/$1
}

main
