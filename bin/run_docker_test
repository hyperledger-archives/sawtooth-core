#!/usr/bin/env python3
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from subprocess import run, PIPE, CalledProcessError, Popen
import os
import sys
import argparse
import time
import yaml


class RunDockerTestError(Exception):
    pass


def main():
    args = parse_args()

    compose_file = _get_compose_file(args.compose_file)

    if 'ISOLATION_ID' in os.environ:
        isolation_id = os.environ['ISOLATION_ID']
    else:
        isolation_id = 'latest'

    if not isolation_id.isalnum():
        raise RunDockerTestError("ISOLATION_ID must be alphanumeric")

    compose = [
        'docker-compose',
        '-p', isolation_id,
        '-f', compose_file
    ]

    compose_up = compose + [
        'up', '-d'
    ]

    docker_wait = ['docker', 'wait',
                    "{}_{}_1".format(isolation_id, args.test_service)]

    compose_down = compose + ['down', '--remove-orphans']

    inspect = [
        'docker', 'inspect',
        '-f', "{{.State.ExitCode}}",
        "{}_{}_1".format(isolation_id, args.test_service)
    ]

    compose_dict = load_compose_file(compose_file)
    if args.test_service not in compose_dict['services']:
        raise RunDockerTestError(
            "Test service '{}' does not exist in compose file: '{}'".format(
                args.test_service, compose_file))

    compose_logs = compose + ['logs', '--follow'] + \
                   [s for s in compose_dict['services']]

    start_time = time.time()
    timeout = args.timeout

    if 'ISOLATION_ID' not in os.environ:
        os.environ['ISOLATION_ID'] = 'latest'

    # Run tests
    try:
        try:
            print("Running: {}".format(compose_up))
            run(compose_up, check=True, timeout=timeout)
            handle = Popen(args=compose_logs, stdout=PIPE,
                           stderr=PIPE,
                           universal_newlines=True)
            print("Running: {}".format(docker_wait))
            run(docker_wait, check=True, timeout=timeout)

        except CalledProcessError:
            raise RunDockerTestError(
                "Failed to start all docker containers. Do `docker ps -a` to "
                "list residual containers.")

        end_time = time.time()
        delta_time = end_time - start_time
        start_time = end_time
        timeout = int(timeout - delta_time)

        # Get success value of tests
        try:
            print("Running: {}".format(inspect))
            success = run(
                inspect, stdout=PIPE,
                timeout=timeout, check=True
            ).stdout.decode().strip()
        except CalledProcessError:
            raise RunDockerTestError(
                "Aborting.. Could not inspect test services '{}'. Do "
                "`docker ps -a` to list residual containers.".format(
                    args.test_service))

        end_time = time.time()
        delta_time = end_time - start_time
        start_time = end_time
        timeout = int(timeout - delta_time)

        # Clean up
        try:
            print("Running: {}".format(compose_down))
            run(compose_down, check=True, timeout=timeout)
        except CalledProcessError:
            raise RunDockerTestError(
                "Failed to remove all docker containers. Do `docker ps -a` to "
                "list residual containers.")

        sys.stdout.write(handle.stdout.read())
        sys.stdout.write(handle.stderr.read())
        exit(int(success))

    except KeyboardInterrupt:
        run(compose_down, check=True, timeout=5)
        exit(1)


def load_compose_file(compose_file):

    try:
        with open(compose_file) as fd:
            contents = fd.read()
        compose = yaml.load(contents)
        return compose

    except OSError:
        raise RunDockerTestError(
            "Docker compose file '{}' could not be opened. Make sure it "
            "exists and is readable.".format(compose_file))


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "compose_file",
        help="docker-compose.yaml file that contains the test")

    parser.add_argument(
        "-s", "--test-service",
        help="service in docker-compose.yaml that runs the test",
        default="integration_test")

    parser.add_argument(
        "-n", "--no-build",
        help="don't build docker images",
        action='store_true',
        default=False)

    parser.add_argument(
        "-t", "--timeout",
        help="how long to wait before timing out",
        type=int,
        default=300)

    return parser.parse_args()


def _get_compose_dir():
    return os.path.join(
        os.path.dirname(os.path.dirname(os.path.realpath(__file__))),
        "integration", "sawtooth_integration", "docker"
    )


def _get_compose_file(compose_file):
    # Try "as given"
    if not os.path.exists(compose_file):
        # If not, try in integration docker directory
        compose_file = os.path.join(_get_compose_dir(), compose_file)
    if not os.path.exists(compose_file):
        # If not, try appending .yaml
        compose_file = os.path.join(
            _get_compose_dir(),
            "{}.yaml".format(compose_file)
        )
    if not os.path.exists(compose_file):
        raise RunDockerTestError(
            "Docker compose file '{}' does not exist.".format(compose_file))

    return compose_file


if __name__ == "__main__":
    try:
        main()

    except RunDockerTestError as err:
        print(err, file=sys.stderr)
        exit(1)
