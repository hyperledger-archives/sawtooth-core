// Copyright 2016 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";
option java_multiple_files = true;
option java_package = "sawtooth.sdk.protobuf";
option go_package = "processor_pb2";

import "transaction.proto";


// The registration request from the transaction processor to the
// validator/executor.
//
// The protocol_version field is used to check if the validator supports
// requested features by a transaction processor.
// Following are the versions supported:
//     1    Transaction processor can request for either raw header bytes or
//          deserialized TransactionHeader field in the TpProcessRequest
//          message. The default option is set to send deserialized
//          TransactionHeader.
message TpRegisterRequest {
    // enum used to fill in transaction header field in TpProcessRequest.
    // This field can be set before transaction processor registers with
    // validator.
    enum TpProcessRequestHeaderStyle {
        HEADER_STYLE_UNSET = 0;
        EXPANDED = 1;
        RAW = 2;
    }

    // A settled upon name for the capabilities of the transaction processor.
    // For example: intkey, xo
    string family = 1;

    // The version supported.  For example:
    //      1.0  for version 1.0
    //      2.1  for version 2.1
    string version = 2;

    // The namespaces this transaction processor expects to interact with
    // when processing transactions matching this specification; will be
    // enforced by the state API on the validator.
    repeated string namespaces = 4;

    // The maximum number of transactions that this transaction processor can
    // handle at once.
    uint32 max_occupancy = 5;

    // Validator can make use of this field to check if the requested features
    // are supported. Registration requests can be either accepted or rejected
    // based on this field.
    uint32 protocol_version = 6;

    // Setting it to RAW, validator would fill in serialized transaction header
    // when sending TpProcessRequest to the transaction processor.
    TpProcessRequestHeaderStyle request_header_style = 7;
}

// A response sent from the validator to the transaction processor
// acknowledging the registration
message TpRegisterResponse {
    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        ERROR = 2;
    }

    Status status = 1;

    // Respond back with protocol_version, the value that can be used by SDK to
    // know if validator supports expected feature.
    uint32 protocol_version = 2;
}

// The unregistration request from the transaction processor to the
// validator/executor. The correct handlers are determined from the
// zeromq identity of the tp, on the validator side.
message TpUnregisterRequest {

}

// A response sent from the validator to the transaction processor
// acknowledging the unregistration
message TpUnregisterResponse {
    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        ERROR = 2;
    }

    Status status = 1;
}


// The request from the validator/executor of the transaction processor
// to verify a transaction.
message TpProcessRequest {
    // The de-serialized transaction header from client request
    TransactionHeader header = 1;

    // The transaction payload
    bytes payload = 2;

    // The transaction header_signature
    string signature = 3;

    // The context_id for state requests.
    string context_id = 4;

    // The serialized header as received by client.
    // Controlled by a flag during transaction processor registration.
    bytes header_bytes = 5;
}


// The response from the transaction processor to the validator/executor
// used to respond about the validity of a transaction
message TpProcessResponse {
    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        INVALID_TRANSACTION = 2;
        INTERNAL_ERROR = 3;
    }

    Status status = 1;

    // A message to include on responses in the cases where
    // status is either INVALID_TRANSACTION or INTERNAL_ERROR
    string message = 2;

    // Information that may be included with the response.
    // This information is an opaque, application-specific encoded block of
    // data that will be propagated back to the transaction submitter.
    bytes extended_data = 3;
}
