// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";
option java_multiple_files = true;
option java_package = "sawtooth.sdk.protobuf";
option go_package = "state_delta_pb2";


// A state change is an entry in a given delta set. StateChange objects 
// have the type of SET, which is either an insert or update, or
// DELETE.  Items marked as a DELETE will have no byte value.
message StateChange {
    enum Type {
        SET = 0;
        DELETE = 1;
    }
    string address = 1;
    bytes value = 2;
    Type type = 3;
}

// A collection of state changes.
message StateDeltaSet {
    repeated StateChange state_changes = 1;
}

// A StateDeltaEvent contains the information about the start and
// end of the delta (from a block perspective) and the list of
// changes that have occurred in that time. The list of state
// changes are limited to those in the namespaces specified at
// subscriber registration time.
message StateDeltaEvent {
    // The block id associated with the changes.
    string block_id = 1;
    // The block number associated with the changes
    int32 block_num = 2;
    // The state root hash which resulted from the changes.
    string state_root_hash = 3;

    // The previous block id
    string previous_block_id = 4;

    // The collection of StateChange objects
    repeated StateChange state_changes = 5;
}

// Registers a subscriber for StateDeltaEvent objects.  The
// identity of the subscriber will be based on the ZMQ connection
// id. This is an idempotent request.
message RegisterStateDeltaSubscriberRequest {
    // The block id (or ids, if trying to walk back a fork) the
    // subscriber last received deltas on.  It can be set to empty
    // if it has not yet received the genesis block.
    repeated string last_known_block_ids = 1;
    // The list of address prefixes of interest.  Only state changes
    // that occur on values in the given prefixes will be sent to the
    // subscriber.
    repeated string address_prefixes = 2;
}

// The response to a RegisterStateDeltaSubscriberRequest
message RegisterStateDeltaSubscriberResponse {
    enum Status {
        // returned on successful registration
        OK = 0;
        // returned on a failed registration, due to
        // an internal validator error
        INTERNAL_ERROR = 1;
        // returned on a failed registration, due to all
        // last_known_block_ids being unknown.  This could imply
        // that a fork had occurred and been resolved since last
        // unregistration.
        UNKNOWN_BLOCK = 2;
    }

    Status status = 1;
}

// Unregisters a subscriber for StateDeltaEvent objects.  The
// identity of the subscriber will be based on the ZMQ connection
// id.  This is an idempotent request.
message UnregisterStateDeltaSubscriberRequest {
    // No data
}

message UnregisterStateDeltaSubscriberResponse {
    enum Status {
        // returned on successful registration
        OK = 0;
        // returned on a failed registration, due to
        // an internal validator error
        INTERNAL_ERROR = 1;
    }
    Status status = 1;
}

// Request message for a set of StateDeltaEvent objects, based on a given list
// of block_ids and a known filter.  The result will include a set of
// StateDeltaEvent objects.
message GetStateDeltaEventsRequest {
    // The block ids to query
    repeated string block_ids = 1;

    // The list of address prefixes of interest.  Only state changes
    // that occur on values in the given prefixes will be sent to the
    // subscriber.
    repeated string address_prefixes = 2;
}

// Response message for a GetStateDeltasRequest.  Returns a list of
// StateDeltaEvent objects for the block_ids requested.  Only block_ids known
// to the validator will result in events.
message GetStateDeltaEventsResponse {
    enum Status {
        // returned on a successful request
        OK = 0;
        // returned on a failed request, due to an internal validator error.
        INTERNAL_ERROR = 1;
        // return on a bad request, where no block id was provided in the
        // request.
        NO_VALID_BLOCKS_SPECIFIED = 2;
    }
    Status status = 1;
    // the events returned for the request.  This may contain only a subset of
    // events matching the given block ids, as unknown blocks are ignored.
    repeated StateDeltaEvent events = 2;
}
