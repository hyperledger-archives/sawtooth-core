// Copyright 2016 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "sawtooth.sdk.protobuf";

import "batch.proto";
import "state_context.proto";
import "block.proto";


// Corresponds to messagetype CLIENT_BATCH_SUBMIT_REQUEST
message ClientBatchSubmitRequest {
    repeated Batch batches = 1;
}

message ClientBatchSubmitResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
    }
    Status status = 1;
}

message ClientStateCurrentRequest {
}

// This is a response to a request from a client (including the rest api)
// for the current merkle root. There will always be a current merkle root
// (if genesis has happened)
// so there is only the general ERROR status response or OK.
message ClientStateCurrentResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
    }
    Status status = 1;
    string merkle_root = 2;
}

// A request to list every entry under a given merkle root or head block.
message ClientStateListRequest {
    string merkle_root = 1;
    string subtree = 2;
}

// A response that lists the Entries under a given merkle root.
//
// Statuses:
//   * OK - everything worked as expected
//   * ERROR - general internal error, such as protobuf failing to deserialize
//   * NOGENESIS - the validate has not been configrued with a genesis block
//   * NOROOT - the merkle_root specified was not found
//   * NORESOURCE - the root sprecidied is valid, but contains no data

message ClientStateListResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
        NOROOT = 3;
        NORESOURCE = 2;
        NOGENESIS = 4;
    }
    Status status = 1;
    repeated Entry entries = 2;
}

// A request from a client for a particular address's data, or for a given
// merkle root or head block
message ClientStateGetRequest {
    string merkle_root = 1;
    string address = 2;
}

// The response to a GetRequest from the client.
//
// Statuses:
//   * OK - everything worked as expected
//   * ERROR - general internal error, such as protobuf failing to deserialize
//   * NOGENESIS - the validate has not been configrued with a genesis block
//   * NOROOT - the head block or merkle_root specified was not found
//   * NORESOURCE - the address specified doesn't exist
//   * NONLEAF - the address isn't a valid, i.e. it is a subtree (truncated)
message ClientStateGetResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
        NORESOURCE = 2;
        NOROOT = 3;
        NOGENESIS = 4;
        NONLEAF = 5;
    }
    Status status = 1;
    bytes value = 2;
}

// A request to return a list of blocks from the validator.
message ClientBlockListRequest {
}

// A response that lists a chain of blocks with the newest at the end, and the
// oldest (genesis) block at the beginning.
//
// Statuses:
//   * OK - everything worked as expected
//   * ERROR - general internal error, such as protobuf failing to deserialize
//   * NOGENESIS - the validate has not been configrued with a genesis block
message ClientBlockListResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
        NOGENESIS = 3;
    }
    Status status = 1;
    repeated Block blocks = 2;
}

// A request to return a specific block from the validator.
// Requires the block to be specified by its unique id, which
// in this case is the block's header signature
message ClientBlockGetRequest {
    string block_id = 1;
}

// A response that returns the block specified by a ClientBlockGetRequest.
//
// Statuses:
//   * OK - everything worked as expected
//   * ERROR - general internal error, such as protobuf failing to deserialize
//   * NORESOURCE - no block with the specified id exists
message ClientBlockGetResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
        NORESOURCE = 2;
    }
    Status status = 1;
    Block block = 2;
}
