// Copyright 2016 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "sawtooth.sdk.protobuf";
option go_package = "client_pb2";

import "block.proto";
import "batch.proto";
import "transaction.proto";
import "client_list_control.proto";


// Information about the status of a batch submitted to the validator.
//
// Attributes:
//     batch_id: The id (header_signature) of the batch
//     status: The committed status of the batch
//     invalid_transactions: Info for transactions that failed, if any
//
// Statuses:
//     COMMITTED - the batch was accepted and has been committed to the chain
//     INVALID - the batch failed validation, it should be resubmitted
//     PENDING - the batch is still being processed
//     UNKNOWN - no status for the batch could be found (possibly invalid)
message ClientBatchStatus {
    enum Status {
        COMMITTED = 0;
        INVALID = 1;
        PENDING = 2;
        UNKNOWN = 3;
    }
    message InvalidTransaction {
        string transaction_id = 1;
        string message = 2;
        bytes extended_data = 3;
    }
    string batch_id = 1;
    Status status = 2;
    repeated InvalidTransaction invalid_transactions = 3;
}

// Submits a list of Batches to be added to the blockchain.
message ClientBatchSubmitRequest {
    repeated Batch batches = 1;
}

// This is a response to a submission of one or more Batches.
// Statuses:
//   * OK - everything with the request worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * INVALID_BATCH - the batch failed validation, likely due to a bad signature
message ClientBatchSubmitResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        INVALID_BATCH = 2;
    }
    Status status = 1;
}

// A request for the status of one or more batches, specified by id.
// If `wait` is set to true, the validator will wait to respond until all
// batches are committed, or until the specified `timeout` in seconds has
// elapsed. Defaults to 300.
message ClientBatchStatusRequest {
    repeated string batch_ids = 1;
    bool wait = 2;
    uint32 timeout = 3;
}

// This is a response to a request for the status of specific batches.
// Statuses:
//   * OK - everything with the request worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NO_RESOURCE - the response contains no data, likely because
//     no ids were specified in the request
message ClientBatchStatusResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NO_RESOURCE = 4;
    }
    Status status = 1;
    repeated ClientBatchStatus batch_statuses = 2;
}

message ClientStateCurrentRequest {
}

// This is a response to a request from a client for the current merkle root.
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block

message ClientStateCurrentResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
    }
    Status status = 1;
    string merkle_root = 2;
}

// A request to list every entry in the merkle tree. Defaults to the most
// current tree, but can fetch older state by specifying either a merkle root
// or a previous head block's id. Results can be further filtered by
// specifying a subtree with a partial address.
message ClientStateListRequest {
    oneof root_key {
        string merkle_root = 1;
        string head_id = 2;
    }
    string address = 3;
    ClientPagingControls paging = 4;
    repeated ClientSortControls sorting = 5;
}

// A response that lists the data Entries from the state's merkle tree,
// filtered by merkle root, head id, or subtree address according to the
// request. Returns the chain head id used to facilitate future requests.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block or merkle_root specified was not found
//   * NO_RESOURCE - the head/root specified is valid, but contains no data
//   * INVALID_PAGING - the paging controls were malformed or out of range
//   * INVALID_SORT - the sorting controls were malformed or invalid

message ClientStateListResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
        INVALID_PAGING = 5;
        INVALID_SORT = 6;
    }

    // An entry in the State
    message Entry {
        string address = 1;
        bytes data = 2;
    }

    Status status = 1;
    repeated Entry entries = 2;
    string head_id = 3;
    ClientPagingResponse paging = 4;
}

// A request from a client for a particular entry in the merkle tree.
// Like State List, it defaults to the newest state, but a merkle root
// or head block id can be used to specify older data. Unlike State List
// the request must be provided with a full address that corresponds to
// a single entry.
message ClientStateGetRequest {
    oneof root_key {
        string merkle_root = 1;
        string head_id = 2;
    }
    string address = 3;
}

// The response to a State Get Request from the client. Sends back just
// the data stored at the entry, not the address. Also sends back the
// head block id used to facilitate further requests.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block or merkle_root specified was not found
//   * NO_RESOURCE - the address specified doesn't exist
//   * INVALID_ADDRESS - address isn't a valid, i.e. it's a subtree (truncated)
message ClientStateGetResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
        INVALID_ADDRESS = 5;
    }
    Status status = 1;
    bytes value = 2;
    string head_id = 3;
}

// A request to return a list of blocks from the validator. May include the id
// of a particular block to be the `head` of the chain being requested. In that
// case the list will include that block (if found), and all blocks previous
// to it on the chain. Can be filtered using specific `block_ids`.
message ClientBlockListRequest {
    string head_id = 1;
    repeated string block_ids = 2;
    ClientPagingControls paging = 3;
    repeated ClientSortControls sorting = 4;
}

// A response that lists a chain of blocks with the newest at the beginning,
// and the oldest (genesis) block at the end.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block specified was not found
//   * NO_RESOURCE - no blocks were found with the parameters specified
//   * INVALID_PAGING - the paging controls were malformed or out of range
//   * INVALID_SORT - the sorting controls were malformed or invalid
message ClientBlockListResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
        INVALID_PAGING = 5;
        INVALID_SORT = 6;
    }
    Status status = 1;
    repeated Block blocks = 2;
    string head_id = 3;
    ClientPagingResponse paging = 4;
}

// A request to return a specific block from the validator. The block must be
// specified by its unique id, in this case the block's header signature
message ClientBlockGetRequest {
    string block_id = 1;
    uint64 block_num = 2;
}

// A response that returns the block specified by a ClientBlockGetRequest.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NO_RESOURCE - no block with the specified id exists
message ClientBlockGetResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NO_RESOURCE = 4;
    }
    Status status = 1;
    Block block = 2;
}

// A request to return a list of batches from the validator. May include the id
// of a particular block to be the `head` of the chain being requested. In that
// case the list will include the batches from that block, and all batches
// previous to that block on the chain. Filter with specific `batch_ids`.
message ClientBatchListRequest {
    string head_id = 1;
    repeated string batch_ids = 2;
    ClientPagingControls paging = 3;
    repeated ClientSortControls sorting = 4;
}

// A response that lists batches from newest to oldest.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block specified was not found
//   * NO_RESOURCE - no batches were found with the parameters specified
//   * INVALID_PAGING - the paging controls were malformed or out of range
//   * INVALID_SORT - the sorting controls were malformed or invalid
message ClientBatchListResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
        INVALID_PAGING = 5;
        INVALID_SORT = 6;
    }
    Status status = 1;
    repeated Batch batches = 2;
    string head_id = 3;
    ClientPagingResponse paging = 4;
}

// Fetches a specific batch by its id (header_signature) from the blockchain.
message ClientBatchGetRequest {
    string batch_id = 1;
}

// A response that returns the batch specified by a ClientBatchGetRequest.
//
// Statuses:
//   * OK - everything worked as expected, batch has been fetched
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NO_RESOURCE - no batch with the specified id exists
message ClientBatchGetResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NO_RESOURCE = 4;
    }
    Status status = 1;
    Batch batch = 2;
}

// A request to return a list of txns from the validator. May include the id
// of a particular block to be the `head` of the chain being requested. In that
// case the list will include the txns from that block, and all txns
// previous to that block on the chain. Filter with specific `transaction_ids`.
message ClientTransactionListRequest {
    string head_id = 1;
    repeated string transaction_ids = 2;
    ClientPagingControls paging = 3;
    repeated ClientSortControls sorting = 4;
}

// A response that lists transactions from newest to oldest.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block specified was not found
//   * NO_RESOURCE - no txns were found with the parameters specified
//   * INVALID_PAGING - the paging controls were malformed or out of range
//   * INVALID_SORT - the sorting controls were malformed or invalid
message ClientTransactionListResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
        INVALID_PAGING = 5;
        INVALID_SORT = 6;
    }
    Status status = 1;
    repeated Transaction transactions = 2;
    string head_id = 3;
    ClientPagingResponse paging = 4;
}

// Fetches a specific txn by its id (header_signature) from the blockchain.
message ClientTransactionGetRequest {
    string transaction_id = 1;
}

// A response that returns the txn specified by a ClientTransactionGetRequest.
//
// Statuses:
//   * OK - everything worked as expected, txn has been fetched
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NO_RESOURCE - no txn with the specified id exists
message ClientTransactionGetResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NO_RESOURCE = 4;
    }
    Status status = 1;
    Transaction transaction = 2;

    // Identifier of the block this transaction is in. Not set if the
    // transaction is pending.
    string block_id = 3;
}
