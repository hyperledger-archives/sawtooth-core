// Copyright 2016 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "sawtooth.sdk.protobuf";

import "batch.proto";
import "block.proto";


// An entry in the State
message Leaf {
    string address = 1;
    bytes data = 2;
}

// Corresponds to messagetype CLIENT_BATCH_SUBMIT_REQUEST
message ClientBatchSubmitRequest {
    repeated Batch batches = 1;
}

message ClientBatchSubmitResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
    }
    Status status = 1;
}

message ClientStateCurrentRequest {
}

// This is a response to a request from a client for the current merkle root.
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block

message ClientStateCurrentResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
    }
    Status status = 1;
    string merkle_root = 2;
}

// A request to list every entry in the merkle tree. Defaults to the most
// current tree, but can fetch older state by specifying either a merkle root
// or a previous head block's id. Results can be further filtered by
// specifying a subtree with a partial address.
message ClientStateListRequest {
    oneof root_key {
        string merkle_root = 1;
        string head_id = 2;
    }
    string address = 3;
}

// A response that lists the data Entries from the state's merkle tree,
// filtered by merkle root, head id, or subtree address according to the
// request. Returns the chain head id used to facilitate future requests.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block or merkle_root specified was not found
//   * NO_RESOURCE - the head/root sprecidied is valid, but contains no data

message ClientStateListResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
    }
    Status status = 1;
    repeated Leaf leaves = 2;
    string head_id = 3;
}

// A request from a client for a particular entry in the merkle tree.
// Like State List, it defaults to the newest state, but a merkle root
// or head block id can be used to specify older data. Unlike State List
// the request must be provided with a full address that corresponds to
// a single entry.
message ClientStateGetRequest {
    oneof root_key {
        string merkle_root = 1;
        string head_id = 2;
    }
    string address = 3;
}

// The response to a State Get Request from the client. Sends back just
// the data stored at the entry, not the address. Also sends back the
// head block id used to facilitate further requests.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block or merkle_root specified was not found
//   * NO_RESOURCE - the address specified doesn't exist
//   * INVALID_ADDRESS - address isn't a valid, i.e. it's a subtree (truncated)
message ClientStateGetResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
        NO_RESOURCE = 4;
        INVALID_ADDRESS = 5;
    }
    Status status = 1;
    bytes value = 2;
    string head_id = 3;
}

// A request to return a list of blocks from the validator. May include the id
// of a particular block to be the `head` of the chain being requested. In that
// case the list will include that block (if found), and all blocks previous
// to it on the chain.
message ClientBlockListRequest {
    string head_id = 1;
}

// A response that lists a chain of blocks with the newest at the end, and the
// oldest (genesis) block at the beginning.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NOT_READY - the validator does not yet have a genesis block
//   * NO_ROOT - the head block specified was not found
message ClientBlockListResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_ROOT = 3;
    }
    Status status = 1;
    repeated Block blocks = 2;
    string head_id = 3;
}

// A request to return a specific block from the validator. The block must be
// specified by its unique id, in this case the block's header signature
message ClientBlockGetRequest {
    string block_id = 1;
}

// A response that returns the block specified by a ClientBlockGetRequest.
//
// Statuses:
//   * OK - everything worked as expected
//   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
//   * NO_RESOURCE - no block with the specified id exists
message ClientBlockGetResponse {
    enum Status {
        OK = 0;
        INTERNAL_ERROR = 1;
        NOT_READY = 2;
        NO_RESOURCE = 4;
    }
    Status status = 1;
    Block block = 2;
}
