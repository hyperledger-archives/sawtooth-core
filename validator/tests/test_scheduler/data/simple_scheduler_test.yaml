# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Addresses and partial addresses can be specified in 3 ways:
#     1. As the hexidecimal character string literal
#     2. As any utf-8 encodable characters followed by ':sha:N', which will
#        result in a min(N, 70) character hex string representation of the
#        sha-512 of the original characters encoded as bytes. If :N is omitted
#        the length defaults to 70 characters.
#     3. As a comma separated list of up to 35 integers in the range 0-255,
#        which will result in a string with hex characters representing the
#        series of integers.

---
- # start of first batch
  - # first transaction
    dependencies: # Optional. No default. List.
    id: a # Optional. No Default. Must be unique for 1 scheduler.
    inputs: # Required
      - aaaa:sha
      - bbbb:sha
    outputs: # Required
      - bbbb:sha
      - cccc:sha
    addresses_to_set: # Optional
      - cccc:sha : # When an address is set to a null value, the test framework
               # creates random bytes to be set at that address.
    valid: True # Optional. Defaults to True
  -
    inputs:
      - aaaa:sha
      - bbbb:sha
    outputs:
      - llll:sha
      - nnnn:sha
    addresses_to_set:
      - nnnn:sha :
  -
    inputs:
      - aaaa:sha
      - cccc:sha
    outputs:
      - qqqq:sha
      - pppp:sha
    addresses_to_set:
      - pppp:sha :
  -
    inputs:
      - cccc:sha
      - zzzz:sha:50
    outputs:
      - zzzz:sha:90
    addresses_to_set:
      - zzzz:sha :
  -
    inputs:
      - nnnn:sha
      - zzzz:sha
      - cccc:sha
    outputs:
      - cccc:sha
    addresses_to_set:
      - cccc:sha :
  -
    inputs:
      - llll:sha
      - nnnn:sha
      - pppp:sha
    outputs:
      - aaaa:sha
      - bbbb:sha
      - llll:sha
    addresses_to_set:
      - llll:sha :
- # start of second batch
  -
    inputs:
      - qqqq:sha
      - llll:sha
    outputs:
      - tttt:sha
      - zzzz:sha
    addresses_to_set:
      - tttt:sha :
    valid: False
  -
    dependencies:
      - a
    inputs:
      - llll:sha
      - qqqq:sha
    outputs:
      - dddd:sha
      - bbbb:sha
    addresses_to_set:
      - dddd:sha :
      - bbbb:sha :
- # third batch
  -
    inputs:
      - llll:sha
      - nnnn:sha
    outputs:
      - nnnn:sha
    addresses_to_set:
      - nnnn:sha :
  -
    inputs:
      - bbbb:sha
      - dddd:sha
      - tttt:sha
    outputs:
      - ddtt:sha
      - ffff:sha
    addresses_to_set:
      - ddtt:sha :
      - ffff:sha :
  -
    inputs:
      - dddd:sha
    outputs:
      - ssss:sha
    addresses_to_set:
      - ssss:sha :
- # fourth batch
  -
    inputs:
      - ffff:sha
      - tttt:sha
    outputs:
      - tttt:sha
      - eeee:sha
      - oooo:sha
    addresses_to_set:
      - oooo:sha :
  -
    inputs:
      - ddtt:sha
      - ooll:sha
    outputs:
      - eeii:sha
      - ssss:sha
    addresses_to_set:
      - ssss:sha :
      - eeii:sha :
    valid: False
  -
    inputs:
      - ffff:sha
      - ooll:sha
    outputs:
      - iiee:sha
    addresses_to_set:
      - iiee:sha :
